%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: forwardOscillations.pdf
%%Creator: Adobe Acrobat 21.1.0
%%For: xuany
%%CreationDate: 6/6/2021, 12:29:06 AM
%%BoundingBox: 0 0 548 533
%%HiResBoundingBox: 0 0 547.5854 532.4280
%%CropBox: 0 0 547.5854 532.4280
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 814 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c017 91.164464, 2020/06/15-10:20:05        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreateDate="2021-06-06T00:14:08+08:00"
   xmp:ModifyDate="2021-06-06T00:15:10+08:00"
   xmp:MetadataDate="2021-06-06T00:15:10+08:00"
   pdf:Producer="Apache FOP Version 2.4.0-SNAPSHOT: PDFDocumentGraphics2D"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:75f400f5-c59e-4909-85c6-c2af8e6b2f47"
   xmpMM:InstanceID="uuid:eaa5e513-80c5-4767-8358-12357db83cbc"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -532.428 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
3.05176e-5 0 mo
3.05176e-5 532.428 li
547.585 532.428 li
547.585 0 li
cp
clp
-365.943 -41.496 mo
890.784 -41.496 li
890.784 577.704 li
-365.943 577.704 li
-365.943 -41.496 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
-365.943 -41.496 mo
890.784 -41.496 li
890.784 577.704 li
-365.943 577.704 li
-365.943 -41.496 li
f
32.3478 509.631 mo
537.002 509.631 li
537.002 4.97663 li
32.3478 4.97663 li
32.3478 509.631 li
f
33.3476 509.631 mo
31.3481 509.631 li
31.3481 4.97663 li
32.3478 4.97663 li
32.3478 509.631 li
33.3476 509.631 li
/1 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /1 /CSD get_res sepcs
.12549 sep
f
33.3476 509.631 mo
32.3478 509.631 li
32.3478 4.97663 li
33.3476 4.97663 li
33.3476 84.7218 li
32.3478 84.7218 li
32.3478 86.7212 li
33.3476 86.7212 li
33.3476 185.652 li
32.3478 185.652 li
32.3478 187.652 li
33.3476 187.652 li
33.3476 286.583 li
32.3478 286.583 li
32.3478 288.583 li
33.3476 288.583 li
33.3476 387.514 li
32.3478 387.514 li
32.3478 389.514 li
33.3476 389.514 li
33.3476 488.445 li
32.3478 488.445 li
32.3478 490.445 li
33.3476 490.445 li
33.3476 509.631 li
f
134.278 509.631 mo
132.279 509.631 li
132.279 490.445 li
134.278 490.445 li
134.278 509.631 li
134.278 488.445 mo
132.279 488.445 li
132.279 389.514 li
134.278 389.514 li
134.278 488.445 li
134.278 387.514 mo
132.279 387.514 li
132.279 288.583 li
134.278 288.583 li
134.278 387.514 li
134.278 286.583 mo
132.279 286.583 li
132.279 187.652 li
134.278 187.652 li
134.278 286.583 li
134.278 185.652 mo
132.279 185.652 li
132.279 86.7212 li
134.278 86.7212 li
134.278 185.652 li
134.278 84.7218 mo
132.279 84.7218 li
132.279 4.97663 li
134.278 4.97663 li
134.278 84.7218 li
f
235.209 509.631 mo
233.21 509.631 li
233.21 490.445 li
235.209 490.445 li
235.209 509.631 li
235.209 488.445 mo
233.21 488.445 li
233.21 389.514 li
235.209 389.514 li
235.209 488.445 li
235.209 387.514 mo
233.21 387.514 li
233.21 288.583 li
235.209 288.583 li
235.209 387.514 li
235.209 286.583 mo
233.21 286.583 li
233.21 187.652 li
235.209 187.652 li
235.209 286.583 li
235.209 185.652 mo
233.21 185.652 li
233.21 86.7212 li
235.209 86.7212 li
235.209 185.652 li
235.209 84.7218 mo
233.21 84.7218 li
233.21 4.97663 li
235.209 4.97663 li
235.209 84.7218 li
f
336.14 509.631 mo
334.141 509.631 li
334.141 490.445 li
336.14 490.445 li
336.14 509.631 li
336.14 488.445 mo
334.141 488.445 li
334.141 389.514 li
336.14 389.514 li
336.14 488.445 li
336.14 387.514 mo
334.141 387.514 li
334.141 288.583 li
336.14 288.583 li
336.14 387.514 li
336.14 286.583 mo
334.141 286.583 li
334.141 187.652 li
336.14 187.652 li
336.14 286.583 li
336.14 185.652 mo
334.141 185.652 li
334.141 86.7212 li
336.14 86.7212 li
336.14 185.652 li
336.14 84.7218 mo
334.141 84.7218 li
334.141 4.97663 li
336.14 4.97663 li
336.14 84.7218 li
f
437.071 509.631 mo
435.072 509.631 li
435.072 490.445 li
437.071 490.445 li
437.071 509.631 li
437.071 488.445 mo
435.072 488.445 li
435.072 389.514 li
437.071 389.514 li
437.071 488.445 li
437.071 387.514 mo
435.072 387.514 li
435.072 288.583 li
437.071 288.583 li
437.071 387.514 li
437.071 286.583 mo
435.072 286.583 li
435.072 187.652 li
437.071 187.652 li
437.071 286.583 li
437.071 185.652 mo
435.072 185.652 li
435.072 86.7212 li
437.071 86.7212 li
437.071 185.652 li
437.071 84.7218 mo
435.072 84.7218 li
435.072 4.97663 li
437.071 4.97663 li
437.071 84.7218 li
f
538.002 509.631 mo
536.003 509.631 li
537.002 509.631 li
537.002 490.445 li
537.002 488.445 li
537.002 389.514 li
537.002 387.514 li
537.002 288.583 li
537.002 286.583 li
537.002 187.652 li
537.002 185.652 li
537.002 86.7212 li
537.002 84.7218 li
537.002 4.97663 li
538.002 4.97663 li
538.002 509.631 li
f
537.002 509.631 mo
536.003 509.631 li
536.003 490.445 li
537.002 490.445 li
537.002 509.631 li
537.002 488.445 mo
536.003 488.445 li
536.003 389.514 li
537.002 389.514 li
537.002 488.445 li
537.002 387.514 mo
536.003 387.514 li
536.003 288.583 li
537.002 288.583 li
537.002 387.514 li
537.002 286.583 mo
536.003 286.583 li
536.003 187.652 li
537.002 187.652 li
537.002 286.583 li
537.002 185.652 mo
536.003 185.652 li
536.003 86.7212 li
537.002 86.7212 li
537.002 185.652 li
537.002 84.7218 mo
536.003 84.7218 li
536.003 4.97663 li
537.002 4.97663 li
537.002 84.7218 li
f
536.003 490.445 mo
437.071 490.445 li
437.071 488.445 li
536.003 488.445 li
536.003 490.445 li
435.072 490.445 mo
336.14 490.445 li
336.14 488.445 li
435.072 488.445 li
435.072 490.445 li
334.141 490.445 mo
235.209 490.445 li
235.209 488.445 li
334.141 488.445 li
334.141 490.445 li
233.21 490.445 mo
134.278 490.445 li
134.278 488.445 li
233.21 488.445 li
233.21 490.445 li
132.279 490.445 mo
33.3476 490.445 li
33.3476 488.445 li
132.279 488.445 li
132.279 490.445 li
f
33.3476 490.445 mo
32.3478 490.445 li
32.3478 488.445 li
33.3476 488.445 li
33.3476 490.445 li
1 /1 /CSD get_res sepcs
.235294 sep
f
134.278 490.445 mo
132.279 490.445 li
132.279 488.445 li
134.278 488.445 li
134.278 490.445 li
f
235.209 490.445 mo
233.21 490.445 li
233.21 488.445 li
235.209 488.445 li
235.209 490.445 li
f
336.14 490.445 mo
334.141 490.445 li
334.141 488.445 li
336.14 488.445 li
336.14 490.445 li
f
437.071 490.445 mo
435.072 490.445 li
435.072 488.445 li
437.071 488.445 li
437.071 490.445 li
f
537.002 490.445 mo
536.003 490.445 li
536.003 488.445 li
537.002 488.445 li
537.002 490.445 li
f
536.003 389.514 mo
437.071 389.514 li
437.071 387.514 li
536.003 387.514 li
536.003 389.514 li
435.072 389.514 mo
336.14 389.514 li
336.14 387.514 li
435.072 387.514 li
435.072 389.514 li
334.141 389.514 mo
235.209 389.514 li
235.209 387.514 li
334.141 387.514 li
334.141 389.514 li
233.21 389.514 mo
134.278 389.514 li
134.278 387.514 li
233.21 387.514 li
233.21 389.514 li
132.279 389.514 mo
33.3476 389.514 li
33.3476 387.514 li
132.279 387.514 li
132.279 389.514 li
1 /1 /CSD get_res sepcs
.12549 sep
f
33.3476 389.514 mo
32.3478 389.514 li
32.3478 387.514 li
33.3476 387.514 li
33.3476 389.514 li
1 /1 /CSD get_res sepcs
.235294 sep
f
134.278 389.514 mo
132.279 389.514 li
132.279 387.514 li
134.278 387.514 li
134.278 389.514 li
f
235.209 389.514 mo
233.21 389.514 li
233.21 387.514 li
235.209 387.514 li
235.209 389.514 li
f
336.14 389.514 mo
334.141 389.514 li
334.141 387.514 li
336.14 387.514 li
336.14 389.514 li
f
437.071 389.514 mo
435.072 389.514 li
435.072 387.514 li
437.071 387.514 li
437.071 389.514 li
f
537.002 389.514 mo
536.003 389.514 li
536.003 387.514 li
537.002 387.514 li
537.002 389.514 li
f
536.003 288.583 mo
437.071 288.583 li
437.071 286.583 li
536.003 286.583 li
536.003 288.583 li
435.072 288.583 mo
336.14 288.583 li
336.14 286.583 li
435.072 286.583 li
435.072 288.583 li
334.141 288.583 mo
235.209 288.583 li
235.209 286.583 li
334.141 286.583 li
334.141 288.583 li
233.21 288.583 mo
134.278 288.583 li
134.278 286.583 li
233.21 286.583 li
233.21 288.583 li
132.279 288.583 mo
33.3476 288.583 li
33.3476 286.583 li
132.279 286.583 li
132.279 288.583 li
1 /1 /CSD get_res sepcs
.12549 sep
f
33.3476 288.583 mo
32.3478 288.583 li
32.3478 286.583 li
33.3476 286.583 li
33.3476 288.583 li
1 /1 /CSD get_res sepcs
.235294 sep
f
134.278 288.583 mo
132.279 288.583 li
132.279 286.583 li
134.278 286.583 li
134.278 288.583 li
f
235.209 288.583 mo
233.21 288.583 li
233.21 286.583 li
235.209 286.583 li
235.209 288.583 li
f
336.14 288.583 mo
334.141 288.583 li
334.141 286.583 li
336.14 286.583 li
336.14 288.583 li
f
437.071 288.583 mo
435.072 288.583 li
435.072 286.583 li
437.071 286.583 li
437.071 288.583 li
f
537.002 288.583 mo
536.003 288.583 li
536.003 286.583 li
537.002 286.583 li
537.002 288.583 li
f
536.003 187.652 mo
437.071 187.652 li
437.071 185.652 li
536.003 185.652 li
536.003 187.652 li
435.072 187.652 mo
336.14 187.652 li
336.14 185.652 li
435.072 185.652 li
435.072 187.652 li
334.141 187.652 mo
235.209 187.652 li
235.209 185.652 li
334.141 185.652 li
334.141 187.652 li
233.21 187.652 mo
134.278 187.652 li
134.278 185.652 li
233.21 185.652 li
233.21 187.652 li
132.279 187.652 mo
33.3476 187.652 li
33.3476 185.652 li
132.279 185.652 li
132.279 187.652 li
1 /1 /CSD get_res sepcs
.12549 sep
f
33.3476 187.652 mo
32.3478 187.652 li
32.3478 185.652 li
33.3476 185.652 li
33.3476 187.652 li
1 /1 /CSD get_res sepcs
.235294 sep
f
134.278 187.652 mo
132.279 187.652 li
132.279 185.652 li
134.278 185.652 li
134.278 187.652 li
f
235.209 187.652 mo
233.21 187.652 li
233.21 185.652 li
235.209 185.652 li
235.209 187.652 li
f
336.14 187.652 mo
334.141 187.652 li
334.141 185.652 li
336.14 185.652 li
336.14 187.652 li
f
437.071 187.652 mo
435.072 187.652 li
435.072 185.652 li
437.071 185.652 li
437.071 187.652 li
f
537.002 187.652 mo
536.003 187.652 li
536.003 185.652 li
537.002 185.652 li
537.002 187.652 li
f
536.003 86.7212 mo
437.071 86.7212 li
437.071 84.7218 li
536.003 84.7218 li
536.003 86.7212 li
435.072 86.7212 mo
336.14 86.7212 li
336.14 84.7218 li
435.072 84.7218 li
435.072 86.7212 li
334.141 86.7212 mo
235.209 86.7212 li
235.209 84.7218 li
334.141 84.7218 li
334.141 86.7212 li
233.21 86.7212 mo
134.278 86.7212 li
134.278 84.7218 li
233.21 84.7218 li
233.21 86.7212 li
132.279 86.7212 mo
33.3476 86.7212 li
33.3476 84.7218 li
132.279 84.7218 li
132.279 86.7212 li
1 /1 /CSD get_res sepcs
.12549 sep
f
33.3476 86.7212 mo
32.3478 86.7212 li
32.3478 84.7218 li
33.3476 84.7218 li
33.3476 86.7212 li
1 /1 /CSD get_res sepcs
.235294 sep
f
134.278 86.7212 mo
132.279 86.7212 li
132.279 84.7218 li
134.278 84.7218 li
134.278 86.7212 li
f
235.209 86.7212 mo
233.21 86.7212 li
233.21 84.7218 li
235.209 84.7218 li
235.209 86.7212 li
f
336.14 86.7212 mo
334.141 86.7212 li
334.141 84.7218 li
336.14 84.7218 li
336.14 86.7212 li
f
437.071 86.7212 mo
435.072 86.7212 li
435.072 84.7218 li
437.071 84.7218 li
437.071 86.7212 li
f
537.002 86.7212 mo
536.003 86.7212 li
536.003 84.7218 li
537.002 84.7218 li
537.002 86.7212 li
f
1.99957 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
32.3478 509.631 mo
537.002 509.631 li
1 /0 /CSD get_res sepcs
.851 sep
@
32.3478 4.97668 mo
537.002 4.97668 li
@
32.3478 509.631 mo
32.3478 504.585 li
@
133.279 509.631 mo
133.279 504.585 li
@
234.21 509.631 mo
234.21 504.585 li
@
335.141 509.631 mo
335.141 504.585 li
@
436.072 509.631 mo
436.072 504.585 li
@
537.002 509.631 mo
537.002 504.585 li
@
32.3478 4.97668 mo
32.3478 10.0233 li
@
133.279 4.97668 mo
133.279 10.0233 li
@
234.21 4.97668 mo
234.21 10.0233 li
@
335.141 4.97668 mo
335.141 10.0233 li
@
436.072 4.97668 mo
436.072 10.0233 li
@
537.002 4.97668 mo
537.002 10.0233 li
@
%ADOBeginSubsetFont: Helvetica-Bold Initial
ct_T42Dict begin
-1.016 -0.48 1.434 1.156
 256 array 0 1 255 {1 index exch /.notdef put} for  /Helvetica-Bold
Type42DictBegin
[<00010000000c000c000c000c4f532f3211852a46000000cc000000606376
74206741296a0000012c000003886670676db24d5cc5000004b400000b97
676c7966c9086a1a000065940003dfdc686561640afb636b0000104c0000
00366868656109860f9b0000108400000024686d7478d124be41000010a8
000022546c6f6361124cd9d0000032fc000022586d617870110902bc0000
5554000000206e616d656bcf78b60000557400000c4c70726570b552e591
000061c0000003d367646972000000000000000000000000000304f202bc
00050000059905330000011e05990533000003d000660200000000000000
000000000000e00002ff5000785b00000000000000007079727300000008
ffa70600fea4003d07ae01db2000019f4f010000044205c2000000200002
05c0001105c2002d0597001d0442001d0000ffda0000ffdb0000ffdafe53
ffef05d0000afffdffed03340000012200000122dffb011400af000700b7
007e000400d200aa0109002300ed013200d9011d012a00d800fe00db00e2
001a008b00a0001a004500e801f6000900e90128013200360082009e009f
ff700070003f003f00e801050015003800e9ff7bffc8fff90042008a00c4
01070113011dffb9002f00870087009a009c010c0262ffb10018004c0077
0080008200c900daffb2ffea001a003600e50111012f043bffdd00020005
001a0039008900aa00b701210123012a015bffe5000200180023005c00aa
ff4dff76ffb2ffef001a002f004e007b008a00e1011f0126012b019a01de
03edff80ff8e0007001c004e005500630063006d00810098009c00ad011f
01260162041c051500390044004b0063008e00cc00e800f2010001290142
017802d503ea03f0043b049affc400050055005c0060009f0103011d0124
01550164017001ad01b401c301f602370261033903d5047004a100020055
008800a100bd00c700d300dd00eb00ed00fa00fd0104012b013e014f017b
019d01ad01e20233025d027d028c02da02ef033103de0407048b058505bb
ff04ffd5fffa0007001e002a003b004700510058006500650066006e0075
007f00840107009700b100c300cc00df00df010a0110012f013101470154
015b016b0179009101a401ba01dc01e401e601e901f60213021f0223022f
0276027d0282028902ad02b202b902ed03110374037d03c003de03f60415
045d04c004c004df052d0574061c064b0751fe94fedfff2dff90ff9affea
0016001600240029002d003e0104006d006d008400870089008e009c00a4
00ab00ae00b200b2fffb013900c400d100df00e100ef00f70121011c011c
012101320138015001510154016c016d017f019801a401aa01b601ba01bb
01bb00d701d701fb01fb01fe00190209022d025b026102790279029a0098
02d302da02ef030c03210328032d034b0353fff103ad03b103f20425045a
0471047b048a0498049f051c053d0557055a0570059505b605cb05d605ef
05f4061d068706a406b406d307080734079807fe012201320120012500b4
00be0082009603700132012400430184011d015600cc010500ed00c500fb
00f900c000a7011d00fe035500880026ffa100b8ff8800dd00bd00b5037c
003c00910293024aff3f03a803090132fff700820030002a002a002a002a
002a002a402a292827262524232221201f1e1d1c1b1a1918171615141312
11100f0e0d0c0b0a090807060504030201002c4523466020b02660b00426
2348482d2c452346236120b02661b004262348482d2c45234660b0206120
b04660b004262348482d2c4523462361b0206020b02661b02061b0042623
48482d2c45234660b0406120b06660b004262348482d2c4523462361b040
6020b02661b04061b004262348482d2c0110203c003c2d2c20452320b0cd
442320b8015a51582320b08d44235920b0ed51582320b04d44235920b090
51582320b00d44235921212d2c20204518684420b001602045b04676688a
4560442d2c01b9400000000a2d2c00b9000040000b2d2c2045b00043617d
6818b0004360442d2c45b01a234445b01923442d2c2045b00325456164b0
50515845441b2121592d2cb00143632362b0002342b00f2b2d2c2045b000
4360442d2c20b0032552582359212d2c69b04061b0008b0c6423648bb840
0062600c642364615c58b0036159b002602d2c45b0112bb0172344b0177a
e5182d2c45b0112bb01723442d2c45b0112bb017458cb0172344b0177ae5
182d2cb002254661658a46b040608b482d2cb0022546608a46b040618c48
2d2c4b53205c58b002855958b00185592d2c20b0032545b019234445b01a
23444565234520b00325606a20b009234223688a6a606120b0005058b21a
401a4523604459b0005258b219401945236044592d2cb9187e3b210b2d2c
b92d412d410b2d2cb93b21187e0b2d2cb93b21e7830b2d2cb92d41d2c00b
2d2cb9187ec4e00b2d2c4b525845441b2121592d2c0120b003252349b040
60b0206320b000525823b002253823b002256538008a63381b2121212121
59012d2c456920b00943b0022660b00325b005254961b0805358b2194019
4523616844b21a401a4523606a44b209191a45652345604259b00943608a
103a2d2c01b005251023208af500b0016023edec2d2c01b005251023208a
f500b0016123edec2d2c01b0062510f500edec2d2c20b001600110203c00
3c2d2c20b001610110203c003c2d2c764520b00325452361681823686044
2d2c7645b00325452361682318456860442d2c7645b00325456168234523
61442db8002a2c4bb800095058b101018e59b801ff85b800441db9000900
035f5e2db8002b2c2020456944b001602db8002c2cb8002b2a212db8002d
2c2046b003254652582359208a208a49648a204620686164b00425462068
6164525823658a592f20b00053586920b000545821b040591b6920b00054
5821b0406559593a2db8002e2c2046b00425465258238a592046206a6164
b0042546206a61645258238a592ffd2db8002f2c4b20b0032650585158b0
80441bb04044591b21212045b0c05058b0c0441b2159592db800302c2020
456944b001602020457d691844b001602db800312cb800302a2db800322c
4b20b003265358b0801bb040598a8a20b0032653582321b0c08a8a1b8a23
5920b0032653582321b801008a8a1b8a235920b0032653582321b801408a
8a1b8a235920b80003265358b0032545b8018050582321b8018023211bb0
03254523212321591b2159442db800332c4b535845441b2121592db80034
2c4bb800095058b101018e59b801ff85b800441db9000900035f5e2db800
352c2020456944b001602db800362cb800352a212db800372c2046b00325
4652582359208a208a49648a204620686164b00425462068616452582365
8a592f20b00053586920b000545821b040591b6920b000545821b0406559
593a2db800382c2046b00425465258238a592046206a6164b0042546206a
61645258238a592ffd2db800392c4b20b0032650585158b080441bb04044
591b21212045b0c05058b0c0441b2159592db8003a2c2020456944b00160
2020457d691844b001602db8003b2cb8003a2a2db8003c2c4b20b0032653
58b0801bb040598a8a20b0032653582321b0c08a8a1b8a235920b0032653
582321b801008a8a1b8a235920b0032653582321b801408a8a1b8a235920
b80003265358b0032545b8018050582321b8018023211bb0032545232123
21591b2159442db8003d2c4b535845441b2121592db8003e2c4bb8000950
58b101018e59b801ff85b800441db9000900035f5e2db8003f2c20204569
44b001602db800402cb8003f2a212db800412c2046b00325465258235920
8a208a49648a204620686164b004254620686164525823658a592f20b000
53586920b000545821b040591b6920b000545821b0406559593a2db80042
2c2046b00425465258238a592046206a6164b0042546206a61645258238a
592ffd2db800432c4b20b0032650585158b080441bb04044591b21212045
b0c05058b0c0441b2159592db800442c2020456944b001602020457d6918
44b001602db800452cb800442a2db800462c4b20b003265358b0801bb040
598a8a20b0032653582321b0c08a8a1b8a235920b0032653582321b80100
8a8a1b8a235920b0032653582321b801408a8a1b8a235920b80003265358
b0032545b8018050582321b8018023211bb003254523212321591b215944
2db800472c4b535845441b2121592db800482c4bb800095058b101018e59
b801ff85b800441db9000900035f5e2db800492c2020456944b001602db8
004a2cb800492a212db8004b2c2046b003254652582359208a208a49648a
204620686164b004254620686164525823658a592f20b00053586920b000
545821b040591b6920b000545821b0406559593a2db8004c2c2046b00425
465258238a592046206a6164b0042546206a61645258238a592ffd2db800
4d2c4b20b0032650585158b080441bb04044591b21212045b0c05058b0c0
441b2159592db8004e2c2020456944b001602020457d691844b001602db8
004f2cb8004e2a2db800502c4b20b003265358b0801bb040598a8a20b003
2653582321b0c08a8a1b8a235920b0032653582321b801008a8a1b8a2359
20b0032653582321b801408a8a1b8a235920b80003265358b0032545b801
8050582321b8018023211bb003254523212321591b2159442db800512c4b
535845441b2121592db800522c4bb800095058b101018e59b801ff85b800
441db9000900035f5e2db800532c2020456944b001602db800542cb80053
2a212db800552c2046b003254652582359208a208a49648a204620686164
b004254620686164525823658a592f20b00053586920b000545821b04059
1b6920b000545821b0406559593a2db800562c2046b00425465258238a59
2046206a6164b0042546206a61645258238a592ffd2db800572c4b20b003
2650585158b080441bb04044591b21212045b0c05058b0c0441b2159592d
b800582c2020456944b001602020457d691844b001602db800592cb80058
2a2db8005a2c4b20b003265358b0401bb000598a8a20b0032653582321b0
808a8a1b8a235920b0032653582321b800c08a8a1b8a235920b003265358
2321b801008a8a1b8a235920b0032653582321b801408a8a1b8a235920b8
0003265358b0032545b8018050582321b8018023211bb003254523212321
591b2159442db8005b2c4b535845441b2121592db8005c2c4bb800095058
b101018e59b801ff85b800441db9000900035f5e2db8005d2c2020456944
b001602db8005e2cb8005d2a212db8005f2c2046b003254652582359208a
208a49648a204620686164b004254620686164525823658a592f20b00053
586920b000545821b040591b6920b000545821b0406559593a2db800602c
2046b00425465258238a592046206a6164b0042546206a61645258238a59
2ffd2db800612c4b20b0032650585158b080441bb04044591b21212045b0
c05058b0c0441b2159592db800622c2020456944b001602020457d691844
b001602db800632cb800622a2db800642c4b20b003265358b0401bb00059
8a8a20b0032653582321b0808a8a1b8a235920b0032653582321b800c08a
8a1b8a235920b0032653582321b801008a8a1b8a235920b0032653582321
b801408a8a1b8a235920b80003265358b0032545b8018050582321b80180
23211bb003254523212321591b2159442db800652c4b535845441b212159
2d0000010000000100004eff377f5f0f3cf5021f080000000000d3380c80
00000000d3380c80f7dcfc270b7e09460000000800000001000000000001
00000629fe2900000c01f7dcfcdb0b7e0001000000000000000000000000
0000089505c7009a00000000023900000239000002aa00e103cb00a70473
000004730038071d002f05c7006f01e7006302aa005902aa0015031d002f
04ac00490239007602aa002f023900800239ff90047300400473008e0473
00400473003604730036047300360473004004730034047300360473003d
02aa00e802aa00e804ac001704ac004904ac001704e3007b07cd00c705c7
003405c700a105c7005c05c7009c055600a504e3009c0639005505c7009a
023900840473002d05c700a104e3009c06aa009705c70097063900650556
00a30639006505c700a30556005504e3002105c7009c0556002f078d001e
055600210556002304e3003402aa00800239ff9002aa002f04ac008b0473
000002aaffce0473003b04e3007b0473004704e3003f0473002f02aa0015
04e3004204e300870239008902390009047300820239008b071d008004e3
008704e3004204e3007d04e3003c031d00820473004202aa001504e3007d
0473001a0639000e0473001a0473001504000021031d0000023d006a031d
002d04ac00040239000002aa00e10473004504730042047300360473ffea
023d006a0473004102aaffd505e5001a02f60028047300af04ac004902aa
002f05e5001a02aaffbd0333005e0464004902aa001a02aa001202aa0076
049cffcb0473ffc30239007102aa001202aa005002ec000e0473000006ac
005a06ac002f06ac004e04e3006d05c7003405c7003405c7003405c70034
05c7003405c700340800001205c7005c055600a5055600a5055600a50556
00a50239ffce023900760239ffb60239ffd505c7001205c7009706390065
0639006506390065063900650639006504ac00550639004705c7009c05c7
009c05c7009c05c7009c055600230556008004e300890473003b0473003b
0473003b0473003b0473003b0473003b071d0038047300470473002f0473
002f0473002f0473002f0239ffce023900760239ffb60239ffd504e3006d
04e3008704e3004204e3004204e3004204e3004204e300420464004904e3
002a04e3007d04e3007d04e3007d04e3007d0473001504e3008004730015
05c700340473003b05c700340473003b05c700340473003b05c7005c0473
004705c7005c0473004705c7005c0473004705c7005c0473004705c7009c
0600003f05c7001204e3003f055600a50473002f055600a50473002f0556
00a50473002f055600a50473002f055600a50473002f0639005504e30042
0639005504e300420639005504e300420639005504e3004205c7009a04e3
008705c7000f04e3fff1035cfffc037100010366000a035c000c0239ffcc
0239ffc90239000b02390003023900840239008906ac0084047200890473
002d027bffc905c700a1047300820473008204e3009c0271008b04e3009c
0239008b04e3009c0356008b04e3009c0329008b04e3fff10239ffe805c7
009704e3008705c7009704e3008705c7009704e3008704e3008705c70097
04e300870639006504e300420639006504e300420639006504e300420800
004b078d003f05c700a3031d008205c700a3031d008005c700a3031d0036
055600550473004205560055047300420556005504730042055600550473
004204e3002102aa001504e3002103b8001504e3002102aaffe305c7009c
04e3007d05c7009c04e3007d05c7009c04e3007d05c7009c04e3007d05c7
009c04e3007d05c7009c04e3007d078d001e0639000e0556002304730015
0556002304e300340400002104e300340400002104e300340400002102aa
001504e3003f0556009b04e3007305c7005b05c700120556009b04e30073
049e0048055600a40602003f048b003504e300130473001e02390059031e
002b031e002b0464003105c7000d04e300870639006507920065065c0042
0533003b055600560473004304c3003d04e300210758009c0671007d0633
005b04e300340400002104cc003804cc003c0468003c04e5004f023d00a5
043b00a50494001b02aa00e109d70048090f0058087b003f0876006d06af
006d042c008b09440063073f00680667005d05c700340473003b0239ffb6
0239ffb60639006504e3004205c7009c04e3007d05c7009c04e3007d05c7
009c04e3007d05c7009c04e3007d05c7009c04e3007d0473002e05c70034
0473003b05c700340473003b08000012071d0038069a0037057f003a0639
005504e3004205c700a1047300820639006504e300420639006504e30042
04a60021044400220239ffb60a0c006d0939006808ab003f0639005504e3
0042055600a305c7009704e3008705c700340473003b08000012071d0038
0639004704e3002a05c700340473003605c700340473003b055600a50473
002f055600a50473002f0239ff1d0239ff190239ffc60239ffcc06390065
04e300420639006504e3004205c700a3031dffaa05c700a3031d005e05c7
009c04e3005c05c7009c04e3007d055600550473004204e3002102aa0015
054f00a6054f00a605c7009a04e3008705c7009c05c700340473003b0556
00a50473002f0639006504e300420639006504e300420639006504e30042
0639006504e3004205560023047300150239000907b0004107b4004205c7
003405c7005c0473004704e3fff104e3002104e3007b04e3007b061b003a
06a800390556002f055600a50473002f0473002d0239fff30698004a0545
0049062e003b0384002b062200240549003b0473003a04bc003b04bc003b
04e3007704730046052b003f04e3003f047300300473002e070f003e040a
0046040a004706620044044b004102aa001504e3004204e3004204e30086
04e3008705450087030600170239008902ad002f032200130271008b071d
0080071d0080071d008004e3ffff05300087043c005c04e30042078d003f
05c70042031d0081031d008103c60081031d0082031d0081023900090239
00090444007804440078030bffd8030bffd8036dfff602aa001502aa0015
05fe0035049e0044047300190639000d0473001403fe00270468003804e3
007b04e3007b04e3007b0429004106390065044b0041052b009a04730081
043f009c04e3003c04e3007b04e3007b0800003f0821001b064c001504db
001506b00015057f008b0555008b038c000804b5004a04e3fffe04e3fffe
0272004402720044011d0005018f0041018f004101e3004103070055031d
0007023a000b02aa00af04e200af02390089023900840239008401a4006f
01a4006f0272003e0272003e0256000c0256000c025600130256001302aa
ffb602aaffb602aa010d02aafff602aa00af02aa000702aa010d02aafff6
02aa000702aa00af01a9001a01a9001a01a4006f01a4006f025600250256
00250256002502aa002f02aaffc902aa009a02aa004202aa004202aaffa8
02aaffd3034f00120256002b02390012011c0045023900210239000d0272
003e03cc000903c3000003c3000003c3000003cc0009025e003d025d003d
02aaffef02aafff60400009702560013025600130256000c0256000c02aa
007b02aa000702aa000c02aa000c02aaffe102aa00e802aa00bf02aa00bf
02aa00bf02aa00bf02aa002402aa002404c200130000fc910000fc900000
fc250000fc180000fc2c0000fc2c0000fc360000fd0d0000fc450000fcfb
0000fcb50000fbd80000fc250000fd430000fc9e0000fbd80000fc360000
fc360000fd010000fd010000fd010000fd010000fc910000fc900000fc82
0000fc820000fc810000fc2b0000fd220000fc810000fc810000fc810000
fc2c0000fd260000fd260000fd0d0000fc450000fcb50000fd010000fc9d
0000fcb50000fd430000fc2c0000fb230000fc250000fc250000fc360000
fc360000fc180000fc540000fc2c0000fc2c0000fc180000fc2c0000fc2c
0000fbfb0000fbfb0000fd220000fc2c0000fc720000fb870000fc870000
fd0d0000fc2c0000fc910000fc900000fc360000fd010000fc240000fd48
0000fc2c0000fc540000fc9e0000fcfb0000fc560000fc4f0000fc810000
fa110000fcaf000000000000fc690000fd220000fc360000fc870000fc69
0000fc690000fb4f0000fd220000fe390000fc470000fc100000fc5e0000
f9d30000f9d30000f9650000f9dd0000f9290000f9d30000f7dc0000fc90
0000fc8d0000fd470000fc790000fc990000fc940000fc860000fc9a0000
fc080000fcf10000fcf70000fc800000fc8202aa00af02aa00af011d0045
04730047047300470473004702aa00e70222008c0329001406cd008c0239
00710784008c07ca008c0453008c07d4005e0775006c0842006c0239ffb6
05c7003705c700a204e300a205c7001b055600a204e3003d05c700a20639
0068025e009305c700a20558002d071a00ae063900ba04e3005206390068
05c700a2055600a204e3002f04e500290556002705c700420556002d06ac
007b06390044025e00040556002704e500480473007704e1009a0239008d
04e1009a04e5004804d500770473002504e3006204730077038d005204e1
009a04e100810239008d0473008d0473003104e1009a0473003104000056
04e500600464002904e3009a0473004e04e500600400004604e1009a05c7
00580473001405c7006d05c7003b0239ffe904e1009a04e5006004e1009a
05c7003b04730047020e0008063900680412002c0412002c055600a504e3
008005c7005c06aa0097063000970548001605c7005c05c7005c05c7005c
056d0086055600a80617001004a000a805c7005a0556004e023900830239
ffcf0473002f0800003907e9008f0664001705c700b205df008e05560031
05c7008f05c7002905bd00a805c700a804a000a805e50019055600a80800
00190564003d05c7008f05c7008f05c700b205c4003906aa008f05c7008f
0639005a05c7008f055600a805c7005a04e500190556003106ac003d0556
001b05e5008f0556005a078d008f07ab008f06aa002f078d00a8055600a8
05c7005a0800008f05cb00460473003904e3004604c5008f038d0087051d
00290473003506ac00100400002d04e3008704e3008704e3008f0538003c
05c7008704e3008704e5004604e3008704e3007f04730046040000290473
001d06a800460473001f04e300870473003f06ac008706aa008705560029
066e008704a000850473004606aa008704e30056048600370473003504e3
0029038d008704730046047300440239008f02890029023900040750003c
070e008704e3002904e3008f048600870473001d04e30085063900b40556
0029082200a205e1005b05c700340473001a080a00a20642005b06ac007b
04f0005b088a003e06a6003306ac007b05c7006d0639005a04e5004605c7
003904e1001d05eb002f04e3001a0aac00650956004204e300a8038d0087
04d9006e0356fff808d9ffef06ddfff7054f0062040a0033056d00a00412
006a06e300a00552006a0731001305d1002305df00a20486007c077600a2
05d9007c05df005f0412002c04f800220412002805560023055600230556
002305560023056dfff80412ffe1075b00360543001b05ac00a0047a0062
05ac00a004d7006205ac00a0047a00620767002505f800250767002505f8
00250239008408d9002006dd000c05df00a20486007c02390089056d0029
04860027056d00290486002708000012071d0038056d0086048600370602
005d047300350602005d0473003508d9002006dd000c054f003d040a002b
04cc00380468003805df008e0486008705df008e048600870655005a0486
00500655004b048600370655004b0486003705df005b04120050056d0017
0412001e056d00170412001e056d00170412001e05ac0059047a004c04d9
00ac037c0075074800a80600008d056dfff80412ffe10460007f04000060
054f0062040a003305f10022049c001405d500a203a2003a044d003804b2
003a0797003a0454003a0459003a05a0003a079e003a04d2003a042c003a
090a003a0459003a047e006b06e2003a044f003a0490003f0672003a043c
006b0616003a06dc003a0630003a0467003a0678003a043d003a0485003a
042d006b0497003a046e003a0442003a04aa003a043f006b0657003a03c0
003a0568003a04c3003a0469003a0409003a0463003a06fc003a041c00bc
06040012040a004602390089043c005c0501003b04fe003d0530003b078e
004204e3004204e3004104440078044400780444007804f40052066f0036
04f500520329002a0329002a035d002a050d0028037800570378002d0329
00210329002102de003202de00320378002f019400610329005c050d005b
037800600378002f032900320378002f0378002f0378005901e4000f0378
00590383003a050d005b03290012036e00540329001a037800460329000e
019400610236005c0378005903290012036e00540329001a0378006d0329
000e07240037052c00210558001d0320000e052b002303730017031c000f
031f0010089800290310007e0000fbf40000fbf40000fbe00000fbe00000
fbe00000fbe00000fb9e0000fb9e0000fcf105c700340473003b05c700a1
04e3007b05c700a104e3007b05c700a104e3007b05c7005c0473004705c7
009c04e3003f05c7009c04e3003f05c7009c04e3003f05c7009c04e3003f
05c7009c04e3003f055600a50473002f055600a50473002f055600a50473
002f055600a50473002f055600a50473002f04e3009c02aa001506390055
04e3004205c7009a04e3008705c7009a04e3008705c7009a04e3008705c7
008204e3006605c7009a04e300870239ffa80239ffa00239ffd90239ffe9
05c700a10473008205c700a10473008205c700a10473008204e3009c0239
008b04e3009c0239ffbd04e3009c0239ffbd04e3009c0239ffae06aa0097
071d008006aa0097071d008006aa0097071d008005c7009704e3008705c7
009704e3008705c7009704e3008705c7009704e300870639006504e30042
0639006504e300420639006504e300420639006504e30042055600a304e3
007d055600a304e3007d05c700a3031d008205c700a3031d008205c700a3
031d005105c700a3031d0001055600550473004205560055047300420556
0055047300420556005504730042055600550473004204e3002102aa0015
04e3002102aa001504e3002102aaffe304e3002102aa001505c7009c04e3
007d05c7009c04e3007d05c7009c04e3007d05c7009c04e3007d05c7009c
04e3007d0556002f0473001a0556002f0473001a078d001e0639000e078d
001e0639000e078d001e0639000e078d001e0639000e078d001e0639000e
055600210473001a055600210473001a055600230473001504e300340400
002104e300340400002104e300340400002104e3008702aafffc0639000e
047300150473003b02aa001505c700340473003b05c700340473003b05d3
003404ec003b05d7ffe804a8ff8505c70034048d003b05c700340473003b
05c700340473003b05c700340473003b05c700340473003b05c700340473
003b05c700340473003b05c700340473003b055600a50473002f055600a5
0473002f055600a50473002f057500a5047d002f0556002b04a2ffb40556
00a50473002f055600a50473002f055600a50473002f0239008402390089
02390084023900890639006504e300420639006504e300420639006504e3
00420639006504e3ffc00639006504e300420639006504e3004206390065
04e3004207920065065c004207920065065c004207920065065c00420792
0065065c004207920065065c004205c7009c04e3007d05c7009c04e3007d
0758009c0671007d0758009c0671007d0758009c0671007d0758009c0671
007d0758009c0671007d0556002304730015055600230473001505560023
04730015055600230473001504e5004804e5004804e5004804e5004804e5
004804e5004804e5004804e500480629006a063b006a086e009b081d006e
078d006a07f0006a078e0070078e00480473007704730077047300770473
00770473007704730077071d006a071d00b208cc009008c4009a08960091
08c0009504e1009a04e1009a04e1009a04e1009a04e1009a04e1009a04e1
009a04e1009a078e006a078e006a093d006a0935006a0907006a0931006a
078eff9e078eff9e0239008d0239008d0239ffbd0239ffc10239ffd10239
ffc10239ffd30239ffd30425006a0425006a05d4006a05cc006a059e006a
05c8006a0425ff9e0425ff9e04e5006004e5006004e5006004e5006004e5
006004e500600800006a0800006a09af006a09a7006a0979006a09a3006a
04e1009a04e1009a04e1009a04e1009a04e1009a04e1009a04e1009a04e1
009a071d006a08c4006a08c0006a0792ff9e05c7003b05c7003b05c7003b
05c7003b05c7003b05c7003b05c7003b05c7003b07ec006a07ec006a099b
006a0993006a0965006a098f006a07ecff9e07ecff9e04e5004804e50048
047300770473007704e1009a04e1009a023900510239005604e5006004e5
006004e1009a04e1009a05c7003b05c7003b04e5004804e5004804e50048
04e5004804e5004804e5004804e5004804e500480899006a0878006a0a73
006a0a7c006a0a15006a0a77006a09c7006609c7006604e1009204e10092
04e1009204e1009204e1009204e1009204e1009204e1009209c7006a09c7
006a0b76006a0b6e006a0b40006a0b6a006a09c7ff9e09c7ff9e05c7003b
05c7003b05c7003b05c7003b05c7003b05c7003b05c7003b05c7003b0a25
006a0a25006a0bd4006a0bcc006a0b9e006a0bc8006a0a25ff9e0a25ff9e
04e5004804e5004804e5004804e5004804e5004804e5004804e5004805c7
003705c7003706cd000606cd008c07d8003701c7006a02c601a401c7006a
0222ffb20222ffbc04e1009204e1009204e1009204e1009a04e100920763
00060784008c07e2000607ca008c080700a20376006a0340006a01c7ff9e
0239ffbf0239ffaa0239ffb60239ffb60239ffcf0239ffc9025effd2025e
ffc2043b002d0453008c036e006a036a006a01c7ff9e04e1009a04e1009a
04e1009a04e1009a04e3009a04e3009a04e1009a04e1009a055600270556
002707a500580797008c071d006a03290014032900140222000605c7003b
05c7003b05c7003b05c7003b05c7003b07f60045082b0059086500060899
008c085200310222008c01c7006a02390000023900000239000002390000
023900000239000002390000023900000239000002390000023900000000
00000000000000000000000000000000000002aa002f02aa002f02aa002f
0473fffb080000f1080000f1043b00a502aafff602390089023900840239
0092023900850400008b0400009704000092040000970473004704730047
02cd0091055401d002a500bd056500bd080000bd02a500bd000000000000
000000000000000000000000000000000000000000000000000008000004
0b62000402aa00af04e200af06e400af02aa00af04e200af06e400af02aa
ffef02aa00aa02aa00aa067d003d055400e104e3007b02aafff607ac001b
07ac001b04f700db06c5001b02aa002f0156fea302aa008002aa008009c6
007b078d007b078d00e104f7007b047300000473000004730005031d002f
02aa00e807ac001b031d002f071d01040702000607ac001b067d005c067d
011008dc00af067d003d067d00ad02aa00e8067d003d067d005702aa00e8
02aa00e80239000000000000000000000000000000000000000000000000
000000000000000000000000000000000000023a0020011d0045023a001b
0239001b02390020023a001a0239001b0239001e02560025015500180256
00250155002e0155000a02720044023a0020023a0047023a00200239001b
023a001b0239001b02390020023a001a0239001b0239001e025600250155
0018025600250155002e0155000a023a001e023a001802720021023a000d
023a0018045e002305c7005805c7005c0473000005320053071d00800678
003906250032050800320832003604e3003f05f400440642003304e30021
063c002f0639005505c700340519001b05c7005c04730031046d00160473
003e06ac004506ac004505c7005c08fa005e05a8003106ac004306ac0043
0816005e05c7004a0800007305e5001a055600a3063900650600002a078e
0011080000cb06250031062500310239003b05c700a105c7003404e3009c
0639fffe0800004e0639005504e3009c04e3009c0556002305c7006f06de
002e039b007306ac002f023900840472008406ab0084078f00840556002f
078f002f09c8002f0c01002f078f008405560021078f002109c8002104e3
009c05c7005c05c7009c06aa0097023900890472008906ab008906ac0089
0473001a06ac001a08e5001a0b1e001a06ac00890473001a06ac001a08e5
001a0239008b0473004704e3003f071d008005c7005c04730047046e0024
04e5fffa04e5fffa069600070696000705b4008304ac00490464ffd505b4
00190231ff6e0464001a04640019046400470464004908c0002207020009
0800ffeb0800ffeb080003b40800038c080003b40800038c0800ffe90800
ffe9080003b40800038c0800ffe90800ffe90800000003f4002104d500b1
05e5001a05e5001a05e5001a045f00160547001503d0001f0636003005ba
002905c700a30473003b02aaffcc063d009a0524008705c700a104730082
04e300340400002104ac009a0425009a01ec004e01f4004e01b3002a01b2
000c01d3002b01d3001a033c001f0343001f03420013033f0013033f0013
02ff004e0224000a0224000b07ec003d0982004e0933004b093300020149
004e0485002505d2000705d1000d04d10014047a00200224000a0224000b
03470042034300470346004103430047034600570344004f034600570344
004f03a0000d03940000039400000394000003a0000d03a1005703940057
039400570394005703a1005703e9005703dd005703dd005703dd005703ea
00570397000303fc003803fc00290412001504b5004a04b5004a04730040
0351002e0493006004730036047300360473003604730040047300340460
00360473003d0652006904e3001c04e3001c03cc000903cc000903cc0009
0464004903f4002405b4fff7023100760464ffd504640049023900920400
00920639005504e3004205c7008e0473005804e3009c0239002705c70075
04e3005c05c70092031d00690400009702390085046400110451000f05b4
00750231ff5e0464ff530464000f055600a50473002f055600a50473002f
06aa0097071d008005c700a3031d00600473002f0473002f05c700340473
003b0473003b055600a50473002f055600a50473002f055600a50473002f
0239ffbb0239ffb7023900890639006504e300420639006504e300420639
006504e30042055600550473004205c7009c04e3007d0473001a0758009c
0671007d09b6008706f9003407d6fff704e3008207d6002307d600310464
003104e5004804e5004804e5004804e5004804e5004804e5004804e50048
04e5004804e5004804e5004804e5004804e5004804e5004804e5004804e5
004804e500480239ffb60239ffb60239ffb50239ffb60239ffb60239ffb6
0239ffb60239ffb60239ffb60239ffbe0239ffbe0239ffb50239ffbe0239
ffbc0239ffbe0239ffbe0239ffbe0239ffbe04e1009a04e1009a04e1009a
04e1009a04e1009a04e1009a04e1009a04e1009a04e1009a04e1009a04e1
009a04e1009a04e1009a04e1009a04e1009a04e1009a04e1009a04e1009a
06cd000606cd008c0629006a086e006a078d006a063b006a085c006a07f0
006a06cd000606cd008c0629006a086e006a078d006a063b006a085c006a
07f0006a047000060453008c0453008c0425006a05d4006a059e006a0425
006a05cc006a05c8006a047000060453008c0453008c0425006a05d4006a
059e006a0425006a05cc006a05c8006a07a500060797008c0797008c071d
006a08c4006a08c0006a071d006a08c4006a08c0006a07a500060797008c
0797008c071d006a08c4006a08c0006a071d006a08c4006a08c0006a05c7
00a305aa008f071d006a08c4006a08c0006a05c7003705c70037025effd3
025effd20556002705560027045f00160239009204000092023900850400
00970000000000000068000000680000006800000068000000dc00000120
0000033000000470000006100000086c000008b800000960000009e00000
0af400000b6400000bd400000c1000000c5400000ccc00000da000000e08
00000f0000001008000010d4000011a0000012a000001320000014140000
14fc00001558000015f000001680000016d8000017700000184000001a1c
00001b3800001c1c00001d0000001dac00001e1000001e7400001f780000
1fe000002030000020ac00002194000021e0000022ec0000237c00002428
000024b400002608000026e8000028280000288800002910000029b40000
2b7400002cb800002d9800002e4000002ea400002f1000002f7800003024
00003058000030ac000031f4000032a400003380000034340000355c0000
36280000371c000037b000003818000038a0000039cc00003a0c00003b5c
00003bfc00003ca800003d6400003e1c00003eb000003fbc000040500000
40f8000041c00000423c0000437c000044ac000045740000465000004694
0000477400004824000048240000489800004a2800004bac00004c300000
4d6400004dd800004f5000004fb400005180000052c0000053c800005410
0000543c00005698000056d400005744000057c40000585c000059300000
598800005a9800005b1400005b6800005c4000005c9800005d3000005e34
00005f2c0000604c000061d0000062a0000062b8000062d0000062e80000
630000006318000063300000641000006538000065500000656800006580
00006598000065b0000065c8000065e0000065f8000066d8000066f00000
670800006720000067380000675000006768000068140000698c000069a4
000069bc000069d4000069ec00006a0400006af800006c0400006c1c0000
6c3400006c4c00006c6400006c7c00006c9400006e2800006f6400006f7c
00006f9400006fac00006fc400006fdc00006ff40000700c000070240000
7188000071a0000071b8000071d0000071e8000072000000721800007294
000073f80000741000007428000074400000745800007470000075100000
752800007540000075580000757000007588000075a0000075b8000075d0
000075e80000760000007618000076300000764800007660000076780000
7690000077e0000078c000007988000079a0000079b8000079d0000079e8
00007a0000007a1800007a3000007a4800007a6000007a7800007a900000
7aa800007ac000007ad800007af000007b0800007b2000007b3c00007b54
00007b6c00007c5000007c6800007c8000007c9800007cb000007cc80000
7ce000007cf800007d1000007d2800007d4000007d8c00007da400007dbc
00007dd400007dec00007e0400007e1c00007e9400007eac00007ec40000
7edc00007ef400007f900000801c000080340000804c00008124000081f0
000082080000822000008238000082500000826800008280000082980000
83400000840c000084240000843c000084540000846c000084840000849c
0000859c000086ec000087040000871c000087340000874c000087640000
877c00008794000087ac000087c4000087dc0000897000008aa000008ab8
00008ad000008ae800008b0000008b1800008c1c00008c3400008c4c0000
8c6400008c7c00008c9400008cac00008cc400008cdc00008cf400008d0c
00008d2400008d3c00008d5400008d6c00008d8400008e3800008e500000
8e6800008e8000008e9800008eb000008ec800008ee000008ef800008f10
00008f8c000090e4000091d80000931c000093f40000950c000095f40000
972800009870000098dc0000999c00009ae400009b7800009c7c00009cd8
00009d4800009db800009e2000009ed800009f780000a0100000a1780000
a2ec0000a4300000a5940000a63c0000a68c0000a7000000a7c00000a888
0000a9dc0000aa540000aac40000abb80000aca40000ad900000ae480000
ae7c0000aee40000af980000b0040000b0240000b0440000b0640000b07c
0000b0940000b0ac0000b0c40000b0dc0000b0f40000b10c0000b1240000
b13c0000b1540000b16c0000b1840000b19c0000b1b40000b1d40000b1f4
0000b2140000b2340000b2540000b2740000b2940000b2b40000b3500000
b3700000b3900000b3b00000b3d00000b3e80000b4000000b5200000b6b8
0000b6d00000b6e80000b7000000b7180000b7300000b7480000b7680000
b7880000b8a80000b9c80000b9e00000b9f80000ba100000ba280000ba40
0000ba580000bb340000bb4c0000bb640000bb840000bba40000bbbc0000
bbd40000bbec0000bc040000bc1c0000bc340000bc4c0000bc640000bc7c
0000bc940000bcac0000bcc40000bcdc0000bcf40000bd0c0000bd240000
bd3c0000bd540000bd6c0000bd840000bd9c0000bdb40000bdcc0000bde4
0000bdfc0000be140000be2c0000be440000bff40000c1940000c2300000
c32c0000c4c00000c6540000c66c0000c6840000c73c0000c7540000c76c
0000c7840000c79c0000c7bc0000c7dc0000c7fc0000c81c0000c8340000
c84c0000c86c0000c88c0000c8a40000c8bc0000c9180000cb2c0000cd4c
0000cdc00000cf140000d0500000d0d00000d1540000d24c0000d3440000
d4f80000d5e40000d62c0000d7040000d81c0000d8d80000d9980000dad8
0000dc180000dd700000de380000df000000dfd40000e1300000e2340000
e3380000e4940000e5680000e6c00000e8140000e8bc0000e9580000ea3c
0000eae80000eb940000ed1c0000ee740000ef0c0000f0900000f1d80000
f2800000f3500000f4640000f4f80000f52c0000f5ac0000f6240000f684
0000f7880000f89c0000f9dc0000faac0000fb800000fc080000fc980000
fe240000ff8400010020000100bc000101a00001022c0001030400010360
000103c4000104f000010620000106a40001074c000107dc0001088c0001
091400010a2c00010b3400010b7c00010bf400010c6800010cc800010dbc
00010e4400010ecc00010fb800011090000111d0000113200001139c0001
141c0001145800011598000116f400011850000119a800011bac00011dc4
00011eb80001202c0001218c000121f0000122c000012360000124440001
25700001260c000126e000012754000127e0000128780001295000012a50
00012ac400012b3000012b6000012ba800012c0000012c5800012cb00001
2d6c00012e1000012eb400012f5800012f9800012fd80001301c00013060
000130ec000131c4000131f8000132240001325400013280000132b40001
32dc000133080001333400013394000133c400013480000135240001358c
000135f8000136600001368c00013728000137780001380c000138a80001
3988000139f000013a7000013abc00013b1800013b4800013c0000013c60
00013d0400013d4800013da000013df800013e5000013e9800013ed40001
3f2000013f6400013fa400013fb400013ff80001403c0001407c000140bc
000141cc000141f800014244000142900001432400014384000143c00001
43fc0001443800014470000144d80001451c000145600001458c000145bc
000145f400014688000146b4000146e00001473c00014770000147d40001
4840000149500001499c000149e000014a1400014a7c00014ac800014b40
00014b9c00014bf400014c4c00014ca400014cfc00014d2800014d540001
4da000014dec00014e2c00014e7400014f1800014f6000014fa800015010
0001503c00015090000150e4000151180001517c0001528c000152e40001
53c400015490000154c400015524000155bc000156000001563800015694
000156f000015784000157b0000157dc0001581c000158b0000158dc0001
5908000159340001596000015a1400015a7800015ae000015b6c00015bb8
00015c9800015cd800015d0400015d3400015d9000015de800015e8c0001
5ebc00015f1c00015f5c00015fc4000160040001607000016124000161f4
00016258000162a4000162a4000162e400016388000163fc000164480001
6488000164c800016538000165ec00016620000166b0000168400001688c
000168ec0001694c00016978000169a400016a2800016a8800016acc0001
6c2c00016cc000016d1000016e2000016ed800016fac000170b40001714c
0001725c000172e80001737c000173c000017420000174500001747c0001
74ac0001759000017698000177a40001783400017860000178fc00017914
000179600001797800017990000179a8000179c0000179d8000179f00001
7a0800017a6c00017be000017c1c00017c5c00017cc000017d0800017d8c
00017ee800017f2400017f9000017fdc000180940001811c000181740001
82b8000183200001840800018458000184a40001850800018680000186ec
000188280001899c00018a1c00018ab800018ad000018ae800018b000001
8b1800018b3000018c6c00018e0800018e6800018fdc000190ac000191a4
000192400001940c00019448000194c00001950c000195c40001960c0001
97500001989400019914000199ec00019ae400019c5400019ca000019d40
00019e8000019eec00019fa00001a12c0001a1c00001a2980001a2b00001
a2c80001a2e00001a3ac0001a43c0001a4dc0001a5ac0001a6700001a764
0001a8840001a9540001aa1c0001aad80001ac8c0001ad640001ae600001
af600001af780001b0280001b1600001b1c00001b2940001b3fc0001b438
0001b4ec0001b5780001b6c00001b7f00001b8980001b90c0001b9240001
b9e00001ba580001babc0001bbb80001bcf00001bd2c0001bdf40001be54
0001beec0001c0a40001c1400001c20c0001c2780001c3140001c3d40001
c4600001c5b00001c61c0001c7040001c7f40001c8400001c8ac0001ca2c
0001ca9c0001cb180001cbbc0001cc740001cd100001ce080001cf100001
cffc0001d0d40001d1fc0001d3700001d4f00001d6740001d7a40001d7e0
0001d8b80001d9a80001da400001db980001dc340001dd0c0001dd780001
ddfc0001deb80001df440001e0880001e0f40001e2480001e33c0001e388
0001e4000001e6400001e6a80001e7300001e7d40001e8c40001e9740001
ea640001eb680001ec580001ed300001ee540001efac0001efc40001f0f4
0001f24c0001f2ac0001f3640001f4ac0001f5000001f5940001f6200001
f7600001f8880001f96c0001f9e00001f9f80001fad00001fb480001fc70
0001fd940001fe7c0001ff900002000c000200a800020184000202940002
041800020584000206ec000208500002098c00020a5800020b4400020bdc
00020c4c00020cbc00020d4c00020dd800020df000020e0800020e780002
0ee400020f5c00020fd40002110c0002124000021478000216fc000217e4
000218b80002199000021a5400021b3000021be800021c7c00021d100002
1dac00021e3400021f84000220cc000221340002219c000221fc0002225c
000222f40002239c0002246400022530000225c800022678000227180002
27c8000228840002292c000229bc00022a5800022b7000022c7400022e28
00022fc800022fd800022ff000023008000230b0000231580002318c0002
31a4000231bc000231d4000231ec000231fc0002320c000232240002323c
00023310000233f000023408000234200002343800023450000234680002
348000023574000236680002368000023698000236b0000236c8000236e0
000236f8000237b0000238640002387c00023894000238ac000238c40002
38dc000238f40002390c000239240002393c000239540002396c00023984
000239dc00023a3400023a4c00023a6400023b4000023c1000023cf80002
3e0c00023f6c000240dc000241840002422c00024394000244f8000246ac
0002481c00024a4c00024b0000024cec00024f2c00025120000252300002
535c00025564000256ac00025810000259f800025b8000025cbc00025e78
00025f7000026264000264280002668400026754000268e8000269bc0002
6b4800026cd000026ec400026ff40002722000027424000275580002773c
0002796800027bb400027d4000027e580002801c000281c4000284080002
8494000285300002864c000286a400028724000288440002893000028ad0
00028c6000028d8800028ea000028f88000290b8000291e8000292c00002
93ec0002953400029694000297f40002990800029aac00029bbc00029cd4
00029d6800029e0000029f200002a0000002a1480002a1980002a2100002
a31c0002a3e80002a4fc0002a5d80002a7000002a7a80002a8d80002a978
0002aa180002aae40002abe80002ac2c0002adc40002ae240002afa40002
b0080002b0580002b0e80002b1880002b1cc0002b3640002b3c40002b540
0002b5a40002b6c00002b8740002b9e00002bae40002bc880002bd9c0002
be3c0002bf340002c0b00002c2080002c2680002c2c80002c3040002c33c
0002c3780002c3b00002c3fc0002c4480002c4d00002c4e80002c5000002
c5180002c5300002c5480002c5600002c5780002c5900002c5a80002c5c0
0002c5d80002c5f00002c6080002c6200002c6380002c6500002c6680002
c6800002c6980002c6b00002c6d00002c6f00002c7100002c7300002c748
0002c7600002c7780002c7900002c7b00002c7d00002c7e80002c8000002
c8180002c8300002c8480002c8600002c8780002c8900002c8a80002c8c0
0002c8d80002c8f00002c9080002c9200002c9380002c9500002c9700002
c9900002c9a80002c9c00002c9d80002c9f00002ca080002ca200002ca38
0002ca500002ca700002ca900002caa80002cac00002cad80002caf00002
cb080002cb200002cb380002cb500002cb680002cb800002cb980002cbb0
0002cbc80002cbe00002cbf80002cc100002cc280002cc400002cc600002
cc800002cca00002ccc00002cce00002cd000002cd200002cd400002cd58
0002cd700002cd880002cda00002cdb80002cdd00002cde80002ce000002
ce200002ce400002ce580002ce700002ce880002cea00002ceb80002ced0
0002cef00002cf100002cf300002cf500002cf700002cf900002cfa80002
cfc00002cfd80002cff00002d0080002d0200002d0380002d0500002d068
0002d0800002d0980002d0b00002d0c80002d0e00002d1000002d1200002
d1400002d1600002d1780002d1900002d1a80002d1c00002d1d80002d1f0
0002d2080002d2200002d2380002d2500002d2680002d2800002d2980002
d2b00002d2c80002d2e00002d2f80002d3100002d3280002d3400002d358
0002d3700002d3880002d3a00002d3b80002d3d00002d3e80002d4000002
d4180002d4300002d6200002d63c0002d6540002d66c0002d6840002d69c
0002d6bc0002d6dc0002d6fc0002d71c0002d73c0002d75c0002d77c0002
d79c0002d7bc0002d7dc0002d7fc0002d81c0002d83c0002d85c0002d87c
0002d89c0002d8bc0002d8dc0002d8fc0002d91c0002d9340002d94c0002
d9640002d97c0002d9940002d9ac0002d9cc0002d9ec0002da0c0002da2c
0002da4c0002da6c0002da8c0002daac0002dacc0002daec0002db040002
db1c0002db340002db4c0002db640002db7c0002db940002dbac0002dbcc
0002dbec0002dc0c0002dc2c0002dc4c0002dc6c0002dc8c0002dcac0002
dccc0002dcec0002dd040002dd1c0002dd340002dd4c0002dd640002dd7c
0002dd940002ddac0002ddc40002dddc0002ddf40002de0c0002de240002
de3c0002de540002de6c0002de840002de9c0002deb40002decc0002dee4
0002defc0002df140002df2c0002df440002df5c0002df740002df8c0002
dfa40002dfbc0002dfd40002dfec0002e0040002e01c0002e0340002e04c
0002e0640002e07c0002e0940002e0ac0002e0c40002e0dc0002e0f40002
e10c0002e1240002e13c0002e1580002e1740002e18c0002e1a40002e1bc
0002e1d40002e1ec0002e2040002e21c0002e2340002e24c0002e2640002
e27c0002e2940002e2ac0002e2c40002e2dc0002e2f40002e30c0002e324
0002e33c0002e3540002e36c0002e3840002e39c0002e3b40002e3cc0002
e3e40002e3fc0002e4140002e42c0002e4440002e45c0002e4740002e48c
0002e4a40002e4bc0002e4d40002e4ec0002e5040002e51c0002e5340002
e54c0002e5640002e57c0002e5940002e5ac0002e5c40002e5dc0002e5f4
0002e60c0002e6240002e63c0002e6540002e66c0002e6840002e69c0002
e6b40002e6cc0002e6e40002e6fc0002e7140002e72c0002e7440002e75c
0002e7740002e78c0002e7a40002e7bc0002e7d40002e7ec0002e8040002
e81c0002e8340002e84c0002e8640002e87c0002e8940002e8ac0002e8c4
0002e8dc0002e8f40002e90c0002e9240002e93c0002e9540002e96c0002
e9840002e99c0002e9b40002e9cc0002e9e40002e9fc0002ea140002ea2c
0002ea440002ea5c0002ea740002ea8c0002eaa40002eac40002eae40002
eb040002eb240002eb440002eb640002eb840002eba40002ebc40002ebe4
0002ec040002ec240002ec440002ec640002ec880002ecac0002eccc0002
ecec0002ed0c0002ed2c0002ed4c0002ed6c0002ed8c0002edac0002edcc
0002edec0002ee0c0002ee2c0002ee4c0002ee6c0002ee8c0002eeac0002
eecc0002eeec0002ef0c0002ef2c0002ef4c0002ef6c0002ef8c0002efac
0002efcc0002efec0002f00c0002f02c0002f04c0002f06c0002f08c0002
f0ac0002f0c40002f0dc0002f0fc0002f1140002f1340002f14c0002f16c
0002f1840002f19c0002f1b40002f1cc0002f1e40002f23c0002f2c40002
f31c0002f3780002f4200002f4400002f4580002f4780002f4900002f4b0
0002f4c80002f4e00002f4f80002f5100002f5280002f5a80002f62c0002
f6cc0002f6e40002f6fc0002f7140002f72c0002f7440002f75c0002f774
0002f78c0002f7a40002f7bc0002f8340002f8b00002f9580002f9700002
f9880002f9a00002f9b80002f9d00002f9e80002fa000002fa180002fa30
0002fa480002fa600002fa780002fa900002fb300002fbcc0002fbf80002
fc180002fc300002fc500002fc680002fc880002fca00002fcb80002fcd0
0002fce80002fd000002fd2c0002fd840002fd840002fd840002fd840002
fd840002fd840002fd840002fd840002fd840002fd840002fd840002fd84
0002fd840002fd840002fd840002fd840002fd840002fdb00002fddc0002
fe080002fe400002fe7c0002fea80002ff100002ff4c0002ffb00003000c
0003007c000300d40003017c0003022c000302f8000303ac000304240003
04c40003055000030588000305b80003062000030690000306c4000306c4
000306c4000306c4000306c4000306c4000306c4000306c4000306c40003
0850000309e800030a1800030a6000030ac000030af000030b3400030b90
00030bc800030c6800030d0c00030de800030e0000030ee800030f140003
0f7400030fd400031020000311cc000311f800031238000312b000031328
000313400003135800031370000313c400031444000314a0000314f40003
158400031614000316b4000317c00003190000031994000319f400031ad8
00031b6000031bd800031c8000031d0400031d6400031e0c00031ed00003
1f5800032004000320040003200400032004000320040003200400032004
000320040003200400032004000320040003200400032118000321680003
2220000322e40003246c000324bc00032654000327c8000328300003286c
000328ac0003295c00032a0800032ac800032bdc00032c2800032ce40003
2e1400032ecc00032f9000033118000331680003330000033470000334d8
000335140003355400033600000336ac00033814000338a8000339bc0003
3a1c00033ab000033c0000033d4000033e8400033f300003409c000341dc
000343b0000346500003489400034a0c00034a2400034b9000034c3c0003
4cd800034e0400034f7c00035080000351c80003531c0003535000035428
0003551c0003577800035a5800035b4000035b5800035c8c00035e900003
60040003601c000360dc000361b000036380000364980003662000036788
000368680003696800036a2c00036b8400036be800036bf800036c100003
6c6800036de800036edc00036fd80003701400037050000370b000037290
000374400003749400037504000375140003752c0003754c000375640003
75740003758c000375ac000375d4000375ec000375fc0003761400037634
00037644000376540003766400037674000376840003769c000376bc0003
76d4000376e4000376fc0003771c000377440003775c0003776c00037784
000377a4000377b4000377c4000377d4000377e4000378bc000379a00003
79b000037a7c00037abc00037b2400037ba000037bb400037bf000037c00
00037d0400037d1800037d2800037d3800037dd800037e7c00037eec0003
7f5400037f8000037fac00037fe000038014000380500003808c000380c8
00038104000381400003817c000381b8000381f400038220000383400003
8390000385ac000387b40003894400038a2000038ad400038b8000038c50
00038d6800038ec40003901c000390e80003917800039230000392cc0003
9380000393f000039450000394a0000394f00003952c000395f000039628
000396640003971c000397d800039820000398f400039a1000039aa80003
9b4000039bb000039bdc00039c0800039cb400039cdc00039d2000039d64
00039e2000039e6800039ee400039f6000039fc00003a0140003a0400003
a06c0003a1340003a21c0003a2e40003a3cc0003a4900003a5740003a638
0003a71c0003a76c0003a7c00003a8140003a8680003a8b80003a9000003
a94c0003a9980003a9e40003aa2c0003aa680003aab40003ab000003ab50
0003ab900003abe80003ac2c0003ac740003acb80003ad100003ad6c0003
ae900003aee80003af8c0003b1040003b19c0003b2940003b4180003b470
0003b65c0003b7d80003b8800003b9580003ba1c0003ba600003baa00003
bae40003bbc40003bcb00003bd680003be200003bf000003c0480003c0bc
0003c1740003c18c0003c1a40003c1bc0003c1d40003c1ec0003c2040003
c21c0003c2340003c24c0003c2640003c3180003c3700003c3880003c3a0
0003c3b80003c3d00003c3e80003c4000003c4200003c4400003c4600003
c4800003c4980003c4b00003c4c80003c4e00003c5000003c5200003c540
0003c5600003c5800003c5980003c5b00003c5d00003c5f00003c6100003
c6300003c6500003c6700003c6880003c6a00003c6b80003c6d80003c6f8
0003c7180003c7380003c7500003c7680003c7880003c7a80003c7c00003
c7d80003c7f00003ca5c0003cac80003cb480003cbc00003cbd80003cbe8
0003cc000003cc200003cc400003cc600003cc800003cca00003ccc00003
cce00003cd000003cd200003cd400003cd600003cd800003cda00003cdc0
0003cde00003ce000003ce200003ce400003ce600003ce800003cea00003
cec00003cee00003cf000003cf200003cf400003cf600003cf800003cfa0
0003cfc00003cfe00003d0000003d0200003d0400003d0600003d0800003
d0a00003d0c00003d0e00003d1000003d1200003d1400003d1600003d180
0003d1a00003d1c00003d1e00003d2000003d2200003d2400003d2600003
d2800003d2980003d2b00003d2c80003d2e00003d2f80003d3100003d328
0003d3400003d3580003d3700003d3880003d3a00003d3b80003d3d00003
d3e80003d4000003d4180003d4300003d4500003d4680003d4800003d498
0003d4b00003d4c80003d4e00003d4f80003d5100003d5300003d5480003
d5600003d5780003d5900003d5a80003d5c00003d5d80003d5f00003d610
0003d6280003d6400003d6580003d6700003d6880003d6a00003d6b80003
d6d00003d6f00003d7080003d7200003d7380003d7500003d7680003d780
0003d9000003d9b80003d9d00003d9e80003da000003da6c0003db040003
db500003dbcc0003dc340003dccc0003dda80003de100003decc0003df24
0003dfdc000100000895007a0009006c00080002001000100066000007e8
01c30004000100000047035a0001000000000000005000a2000100000000
00010009010700010000000000020004011b00010000000000030024016a
0001000000000004000a01af0001000000000005001001dc000100000000
0006000e020b0001000000000007003202800001000000000012000e02d1
0003000104010004001c07700003000104030002000e07d4000300010404
0002000407e40003000104050002000807ea00030001040600020006065a
000300010406000700780662000300010407000200080368000300010407
0004001c03720003000104070007007803900003000104080002000c07f4
000300010409000000a000000003000104090001001200f3000300010409
0002000801110003000104090003004801200003000104090004001e018f
0003000104090005002001ba0003000104090006001c01ed000300010409
00070064021a0003000104090012001c02b300030001040a0004002205d4
00030001040a0007006005f800030001040b0002000c074000030001040b
00040020074e00030001040c0002000802e000030001040c0004001c02ea
00030001040c0007005e030800030001040d0002000607b000030001040d
0004001a07b800030001040e00020010080200030001041000020012040a
00030001041000040026041e000300010410000700600446000300010411
00020008081400030001041200020006081e0003000104130002000604a8
0003000104130004001a04b00003000104130007007404cc000300010414
00020006071400030001041400040022071c000300010415000200080826
0003000104160002000e06dc0003000104160004002606ec000300010418
0002000a08300003000104190002000c083c00030001041a00020014084a
00030001041b00020008086000030001041d00020006054200030001041d
0004001a054a00030001041d0007006c056600030001041e00020006086a
00030001041f0002000a08720003000104210002000a087e000300010422
0002000c088a00030001042900040020078e00030001042a000200060898
0003000104390002000a08a000030001043e0002000a08ac000300010804
0002000408b80003000108090002000808be0003000108160002000e08c8
000300010c010002000808d8000300010c0a0002000e08e200a900200031
003900390030002d00320030003000360020004100700070006c00650020
0043006f006d0070007500740065007200200049006e0063002e002000a9
002000310039003800310020004c0069006e006f00740079007000650020
00410047002000a900200031003900390030002d00390031002000540079
0070006500200053006f006c007500740069006f006e007300200049006e
0063002e0000a920313939302d32303036204170706c6520436f6d707574
657220496e632e20a92031393831204c696e6f7479706520414720a92031
3939302d3931205479706520536f6c7574696f6e7320496e632e00004800
65006c007600650074006900630061000048656c76657469636100004200
6f006c00640000426f6c640000480065006c007600650074006900630061
00200042006f006c0064003b002000310030002e00300064003400650031
003b00200032003000310035002d00300034002d00310036000048656c76
657469636120426f6c643b2031302e30643465313b20323031352d30342d
31360000480065006c007600650074006900630061202d0020202c05e205
d105d4000048656c766574696361200000560065007200730069006f006e
002000310030002e00300064003400650031000056657273696f6e203130
2e30643465310000480065006c007600650074006900630061002d004200
6f006c0064000048656c7665746963612d426f6c640000480065006c0076
006500740069006300610020006900730020006100200072006500670069
007300740065007200650064002000740072006100640065006d00610072
006b0020006f00660020004c0069006e006f007400790070006500200041
0047000048656c7665746963612069732061207265676973746572656420
74726164656d61726b206f66204c696e6f74797065204147000048006500
6c00760065007400690063006100200042006f006c0064000048656c7665
7469636120426f6c64000047007200610073000000480065006c00760065
007400690063006100200047007200610073000000480065006c00760065
0074006900630061002000650073007400200075006e00650020006d0061
00720071007500650020006400e90070006f007300e90065002000640065
0020004c0069006e006f0074007900700065002000410047000000460065
00740074000000480065006c007600650074006900630061002000460065
00740074000000480065006c007600650074006900630061002000690073
0074002000650069006e002000650069006e006700650074007200610067
0065006e0065007300200057006100720065006e007a0065006900630068
0065006e00200064006500720020004c0069006e006f0074007900700065
002000410047000000470072006100730073006500740074006f00000048
0065006c0076006500740069006300610020006700720061007300730065
00740074006f000000480065006c007600650074006900630061002000e8
00200075006e0020006d00610072006300680069006f0020007200650067
006900730074007200610074006f0020006400690020004c0069006e006f
00740079007000650020004100470000005600650074000000480065006c
0076006500740069006300610020007600650074000000480065006c0076
00650074006900630061002000690073002000650065006e002000670065
00720065006700690073007400720065006500720064002000680061006e
00640065006c0073006d00650072006b002000760061006e0020004c0069
006e006f0074007900700065002000410047000000460065007400000048
0065006c0076006500740069006300610020004600650074000000480065
006c007600650074006900630061002000e4007200200065007400740020
007200650067006900730074007200650072006100740020007600610072
0075006d00e40072006b00650020006600f600720020004c0069006e006f
0074007900700065002000410047000000480065006c0076006500740069
006300610020004e006500670072006900740061000000480065006c0076
0065007400690063006100200065007300200075006e00610020006d0061
007200630061002000720065006700690073007400720061006400610020
006400650020004c0069006e006f00740079007000650020004100470000
004600650064000000480065006c00760065007400690063006100200065
007200200065007400200072006500670069007300740072006500720065
007400200076006100720065006d00e60072006b0065002000740069006c
006800f800720065006e006400650020004c0069006e006f007400790070
00650020004100470000004e00650067007200690074006f000000480065
006c00760065007400690063006100200043006100720072006500670061
0064006f0000004600650074000000480065006c00760065007400690063
0061002000480061006c00760066006500740000004c0069006800610076
0061000000480065006c0076006500740069006300610020006c00690068
006100760061000000480065006c00760065007400690063006100200623
06330648062f000000480065006c00760065007400690063006100200628
0631062c0633062a0647000005e205d105d4000000480065006c00760065
0074006900630061002005e205d105d40000004e00650067007200650074
006100007c979ad400000042006f006c00640000038803bd03c403bf03bd
03b10000004600e9006c006b00f6007600e90072000030dc30fc30eb30c9
0000bcfcb4dcccb400000042006f006c006400000041006c00640069006e
0000041604380440043d044b043900000050006f006400650062006c006a
0061006e006900000042006f006c006400000e2b0e190e320000004b0061
006c0131006e00000054006500620061006c0000041604380440043d0438
0439000001101ead006d0000092c094b0932094d09210000005400650062
0061006c00007c974f5300000042006f006c00640000004e006500670072
00690074006f000006390631064a06360000004e00650067007200690074
00610000b8005c2bb800522bb800482bb8003e2bb800342bb8002a2bb108
40ba019000145df44009011f04000b1fd819eebe012e000d00e6012e000d
00b0012e400c0d000963833c1f63838348294109014b00370401001f0145
00240401001f0144b224ab1fb8013eb224231fb8013db224231fb80102b2
371d1fb80100400937241ffd37621ffc37b80801401b1ff824931ff72493
1ff6243f1ff524311fd1371d1fd037471fcd41b80801b21fcb2ab80201b2
1fca24b80401400f1fc824811fb537291fb4373b1fb227b80401b21fb141
b80401b61fa437811fa384b80401b21fa22ab80401b21fa124b8019ab21f
a024b8019ab61f9f243f1f9683b80401b21f9527b80401b21f8227b80401
b21f7084b80801b21f6fb3b80801b21f6eb3b802abb61f6d24261f6224b8
0101400b1f5d246c1f5c24391f5441b80125b21f4d27b80401b61f4c27cd
1f4b41b80401b21f4024b8019ab21f3683b80401b21f3524b80201b21f32
24b8019ab61f2c24bb1f2884b80801b21f2241b8040140131f20244c1f1d
24261f2ca0961f2c245e1f412ab801a8b748282a2448279636b801f4b21f
4d27b801f4b21f9527b801f4b21f6e27b801f4b21f6327bd01a700470029
015a00250199b348296fb3b80190b21f83b3b8019ab348283725b803e840
121fb327482784274827362748272527482755b80154402c079707640755
0733072b072907260721071e071b071408120810080e080c080a08080806
0804080208000814b8ffe0402b0000010014061000000100060400000100
0410000001001002000001000200000001000002010802004a00b8060085
16763f183f123e113946443e113946443e113946443e113946443e113946
60443e11394660442b2b2b2b2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b
2b18011db0964b5358b0aa1d59b0324b5358b0ff1d592b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b65422b2b2b4b5279b35279eb56456523456023456560234560b08b
766818b080622020b1eb794565234520b003266062636820b003266165b0
79236544b0eb234420b152564565234520b003266062636820b003266165
b056236544b0522344b10056455458b156406544b25240524523614459b3
5045484e456523456023456560234560b089766818b080622020b1484545
65234520b003266062636820b003266165b045236544b048234420b1504e
4565234520b003266062636820b003266165b04e236544b0502344b1004e
455458b14e406544b250405045236144592b2b456953420000>
[16317 16341 16053 16353 16341 16277 16289 16197 16289 16293 16177 16301 16269
16277 16297 9861 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 3276 19 <00020040ffdc042805b4000b00170075405917012707d70f03380d370f37
1338154b0d440f44134f159815b713ba15c613ca150d1700530676007606
040606a606c80f03084017050240110d05830e0b830ea710143014027014
80149014a014b014d014f01407141947184e1076c418d45d71e44ded10ed
003fed3fed31300072715d01720012333212351026232206110012111002
212002111012210163527f7f4f4f7f7f5201e6dfdffeebfeebdfdf011501
cdfef70109fa0106fcfcfefa02edfe7afe99fe99fe7c0184016701670186
0000>Helvetica-Bold AddT42Char 
1 0 0 <0002009a0000053d05c200030007003e402105061d02010004071d03000a
05041d0303021a0906071d0100190809aa216c3c182b2b4ef43c4dfd3c4e
10f63c4d10fd3c003f3cfd3c3f3cfd3c313033112111271121119a04a3b8
fccd05c2fa3eb80452fbae000000>Helvetica-Bold AddT42Char 
Helvetica-Bold /CharStrings get begin
/zero 19 def
end
Helvetica-Bold /Encoding get
dup 48 /zero put
pop
end
%ADOEndSubsetFont
/OZXKHQ+Helvetica-Bold /Helvetica-Bold findfont ct_VMDictPut
/OZXKHQ+Helvetica-Bold*1 
[48{/.notdef}rp /zero 207{/.notdef}rp]
OZXKHQ+Helvetica-Bold nf
OZXKHQ+Helvetica-Bold*1 [15.9964 0 0 -15.9964 0 0 ]msf
27.4387 527.267 mo
(0)sh
%ADOBeginSubsetFont: Helvetica-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal OZXKHQ+Helvetica-Bold gcheck setglobal} if
1 3488 20 <0001008e0000030705aa000d0032401e29053905020d01cc09040c0c0bb3
000938200c300c600cb00c040c0f470e1076c418d45de4cced003f3ff4cd
3130005d13353637363736373635331121118e8736563625130bedfedc03
e8c2060c133927412713fa5603e8>OZXKHQ+Helvetica-Bold AddT42Char 
OZXKHQ+Helvetica-Bold /CharStrings get begin
/one 20 def
end
OZXKHQ+Helvetica-Bold /Encoding get
dup 49 /one put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/OZXKHQ+Helvetica-Bold*1 
[48{/.notdef}rp /zero /one 206{/.notdef}rp]
OZXKHQ+Helvetica-Bold nf
OZXKHQ+Helvetica-Bold*1 [15.9964 0 0 -15.9964 0 0 ]msf
123.461 527.267 mo
(10)
[8.89402 0 ]xsh
%ADOBeginSubsetFont: Helvetica-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal OZXKHQ+Helvetica-Bold gcheck setglobal} if
1 3592 21 <000100400000042105b1002100884061071401041b071c6f1203041d1901
1618660160046206671a97019502981aa6010b001910193419351c041c19
0402041e0f0a4013051ea1210c1e1c04030e07b316731f01020e630f7c1f
a7102101702180219021a021b021d021f02107212347224e1076c418d45d
71e44df4ed393910f4ed111739003ffd3feddd111739015d31305d710071
36373637363736353426232207060721363736213204151407060f010e01
07211521443f3de3c53a59665f822f1b05feeb073c720123e60110603f90
726b4f1b0279fc1f9c8191a28d3d5f715c7a61387ab972d9ffd2a17d5366
514c442dfb000000>OZXKHQ+Helvetica-Bold AddT42Char 
OZXKHQ+Helvetica-Bold /CharStrings get begin
/two 21 def
end
OZXKHQ+Helvetica-Bold /Encoding get
dup 50 /two put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/OZXKHQ+Helvetica-Bold*1 
[48{/.notdef}rp /zero /one /two 205{/.notdef}rp]
OZXKHQ+Helvetica-Bold nf
OZXKHQ+Helvetica-Bold*1 [15.9964 0 0 -15.9964 0 0 ]msf
224.391 527.267 mo
(20)
[8.89401 0 ]xsh
%ADOBeginSubsetFont: Helvetica-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal OZXKHQ+Helvetica-Bold gcheck setglobal} if
1 3840 22 <00010036ffdc042105b100300076b609200198220130b80108403c2c171e
25250bf66f0cdf0c020c0c2c13401e0504402c0d252507106f210783290c
8c1663177c006329a71030303002a030b030d030f03004303247314e1076
c418d45d71e44dedf4fde610edd4ed12392f003fed3fed12392f5dfd393d
2f1810cd10ed3130005d0171011417163332363534272623353637363534
262322061721363736373e01333204151407060732171615140223202726
27014e1c3489547d74428e8b375f6158655f02fef60421234b389a70d000
ff4c303427496dfffafecc783f0701bd573969736c8f301bcc02192a8053
68806b6c6155483336d7b5805837144365afb8fee9c96bad>OZXKHQ+Helvetica-Bold AddT42Char 
OZXKHQ+Helvetica-Bold /CharStrings get begin
/three 22 def
end
OZXKHQ+Helvetica-Bold /Encoding get
dup 51 /three put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/OZXKHQ+Helvetica-Bold*1 
[48{/.notdef}rp /zero /one /two /three 204{/.notdef}rp]
OZXKHQ+Helvetica-Bold nf
OZXKHQ+Helvetica-Bold*1 [15.9964 0 0 -15.9964 0 0 ]msf
325.322 527.267 mo
(30)
[8.89401 0 ]xsh
%ADOBeginSubsetFont: Helvetica-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal OZXKHQ+Helvetica-Bold gcheck setglobal} if
1 4104 23 <000200360000042f05a1000a000d008f40450e0c480c480d8f0cdc0c051f
0c0158077a0789079907a80705050d460d830dd60d04110d01040500030c
090d0a01080b0d0a030c0c0d0df512060607060c07040a0df70005b8014c
4009030c0d07050c03b30abb013a0001000901a9b3060f470e4e1076c418
4dd4f43ce4fd3c113939003ff43cfd3c3f393901872e2b047d10c50f0f0f
31300172715d0072710123112111213501211133211101042fa4fee9fdc2
02150140a4fe45fe950138fec80138f90370fc760272fd8e>OZXKHQ+Helvetica-Bold AddT42Char 
OZXKHQ+Helvetica-Bold /CharStrings get begin
/four 23 def
end
OZXKHQ+Helvetica-Bold /Encoding get
dup 52 /four put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/OZXKHQ+Helvetica-Bold*1 
[48{/.notdef}rp /zero /one /two /three /four 203{/.notdef}rp]
OZXKHQ+Helvetica-Bold nf
OZXKHQ+Helvetica-Bold*1 [15.9964 0 0 -15.9964 0 0 ]msf
426.253 527.267 mo
(40)
[8.89401 0 ]xsh
%ADOBeginSubsetFont: Helvetica-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal OZXKHQ+Helvetica-Bold gcheck setglobal} if
1 4308 24 <00010036ffda042105970020005e40160e0f0fa1121212130d0ec2130940
17171d12a10f0420b80155401903401d0d113813120d0006831a0fc3006f
0e381aa720224721104e76c418d4e44de4fded10ed11393939e4003feded
3fed12392ffd39f4c401872e2b7d10c53130011e01333236353426232207
060725132115210336373633320415140021222427015211605c6a6f686e
34264322ff0066031ffdaf3442253e59b4010cfefefeffcffef60f01845d
6595716f990d18410c0321f2fec32b0e17f2e7c9fec4decc>OZXKHQ+Helvetica-Bold AddT42Char 
OZXKHQ+Helvetica-Bold /CharStrings get begin
/five 24 def
end
OZXKHQ+Helvetica-Bold /Encoding get
dup 53 /five put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/OZXKHQ+Helvetica-Bold*1 
[48{/.notdef}rp /zero /one /two /three /four /five 202{/.notdef}rp]
OZXKHQ+Helvetica-Bold nf
OZXKHQ+Helvetica-Bold*1 [15.9964 0 0 -15.9964 0 0 ]msf
527.184 527.267 mo
(50)
[8.89398 0 ]xsh
32.3478 509.631 mo
32.3478 4.97668 li
@
537.002 509.631 mo
537.002 4.97668 li
@
32.3478 489.445 mo
37.3944 489.445 li
@
32.3478 388.514 mo
37.3944 388.514 li
@
32.3478 287.583 mo
37.3944 287.583 li
@
32.3478 186.652 mo
37.3944 186.652 li
@
32.3478 85.7214 mo
37.3944 85.7214 li
@
537.002 489.445 mo
531.956 489.445 li
@
537.002 388.514 mo
531.956 388.514 li
@
537.002 287.583 mo
531.956 287.583 li
@
537.002 186.652 mo
531.956 186.652 li
@
537.002 85.7214 mo
531.956 85.7214 li
@
OZXKHQ+Helvetica-Bold*1 [15.9964 0 0 -15.9964 0 0 ]msf
17.3304 493.7 mo
(0)sh
%ADOBeginSubsetFont: Helvetica-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal OZXKHQ+Helvetica-Bold gcheck setglobal} if
1 3088 17 <00010080000001af012a0003002640130128030a0517171a017000190405
70217f3c182b2b4ef44dfd4e456544e6003f4ded31301321112180012ffe
d1012afed6000000>OZXKHQ+Helvetica-Bold AddT42Char 
OZXKHQ+Helvetica-Bold /CharStrings get begin
/period 17 def
end
OZXKHQ+Helvetica-Bold /Encoding get
dup 46 /period put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/OZXKHQ+Helvetica-Bold*1 
[46{/.notdef}rp /period /.notdef /zero /one /two /three /four 
/five 202{/.notdef}rp]
OZXKHQ+Helvetica-Bold nf
OZXKHQ+Helvetica-Bold*1 [15.9964 0 0 -15.9964 0 0 ]msf
1.62127 392.769 mo
(0.5)
[8.89401 4.44701 0 ]xsh
OZXKHQ+Helvetica-Bold*1 [15.9964 0 0 -15.9964 0 0 ]msf
17.3304 291.838 mo
(1)sh
OZXKHQ+Helvetica-Bold*1 [15.9964 0 0 -15.9964 0 0 ]msf
1.62127 190.907 mo
(1.5)
[8.89401 4.44701 0 ]xsh
1 /0 /CSD get_res sepcs
.851 sep
OZXKHQ+Helvetica-Bold*1 [15.9964 0 0 -15.9964 0 0 ]msf
17.3304 89.976 mo
(2)sh
0 lc
32.3478 489.445 mo
32.6506 483.479 li
32.9534 477.69 li
33.2562 472.071 li
33.559 466.619 li
33.8618 461.327 li
34.1646 456.192 li
34.4674 451.209 li
34.7702 446.373 li
35.073 441.68 li
35.3758 437.126 li
35.6786 432.707 li
35.9814 428.417 li
36.2841 424.255 li
36.5869 420.216 li
36.8897 416.296 li
37.1925 412.492 li
37.4953 408.8 li
37.7981 405.218 li
38.1009 401.741 li
38.4037 398.367 li
38.7065 395.093 li
39.0093 391.916 li
39.312 388.832 li
39.6149 385.84 li
39.9177 382.936 li
40.2205 380.118 li
40.5232 377.383 li
40.826 374.729 li
41.1288 372.154 li
41.4316 369.654 li
41.7344 367.229 li
42.0372 364.875 li
42.34 362.59 li
42.6428 360.374 li
42.9456 358.222 li
43.2484 356.135 li
43.5512 354.109 li
43.854 352.143 li
44.1567 350.234 li
44.4596 348.383 li
44.7624 346.586 li
45.0651 344.842 li
45.3679 343.15 li
45.6707 341.508 li
45.9735 339.914 li
46.2763 338.367 li
46.5791 336.866 li
46.8819 335.41 li
47.1847 333.996 li
47.4875 332.625 li
47.7903 331.294 li
48.093 330.002 li
48.3959 328.748 li
48.6987 327.531 li
49.0014 326.351 li
49.3042 325.205 li
49.6071 324.093 li
49.9098 323.014 li
50.2126 321.967 li
50.5154 320.951 li
50.8182 319.965 li
51.121 319.008 li
51.4238 318.079 li
51.7266 317.178 li
52.0294 316.303 li
52.3322 315.454 li
52.6349 314.63 li
52.9377 313.831 li
53.2405 313.055 li
53.5433 312.303 li
53.8461 311.572 li
54.1489 310.863 li
54.4517 310.175 li
54.7545 309.507 li
55.0573 308.859 li
55.3601 308.231 li
55.6629 307.62 li
55.9657 307.028 li
56.2685 306.453 li
56.5713 305.896 li
56.8741 305.355 li
57.1769 304.829 li
57.4796 304.32 li
57.7824 303.825 li
58.0852 303.345 li
58.388 302.879 li
58.6908 302.427 li
58.9936 301.988 li
59.2964 301.563 li
59.5992 301.149 li
59.902 300.749 li
60.2048 300.359 li
60.5076 299.982 li
60.8103 299.615 li
61.1132 299.26 li
61.416 298.915 li
61.7187 298.58 li
62.0215 298.255 li
62.3243 297.939 li
62.6271 297.633 li
62.9299 297.336 li
63.2327 297.048 li
63.5355 296.768 li
63.8383 296.497 li
64.1411 296.233 li
64.4439 295.978 li
64.7467 295.73 li
65.0495 295.489 li
65.3523 295.255 li
65.655 295.029 li
65.9578 294.809 li
66.2607 294.595 li
66.5634 294.388 li
66.8662 294.187 li
67.169 293.991 li
67.4718 293.802 li
67.7746 293.618 li
68.0774 293.44 li
68.3802 293.267 li
68.683 293.099 li
68.9858 292.936 li
69.2885 292.778 li
69.5913 292.624 li
69.8942 292.475 li
70.1969 292.331 li
70.4997 292.19 li
70.8025 292.054 li
71.1053 291.922 li
71.4081 291.794 li
71.7109 291.669 li
72.0137 291.549 li
72.3165 291.431 li
72.6193 291.318 li
72.9221 291.207 li
73.2249 291.1 li
73.5276 290.996 li
73.8305 290.895 li
74.1332 290.797 li
74.436 290.702 li
74.7388 290.61 li
75.0416 290.521 li
75.3444 290.434 li
75.6472 290.35 li
75.95 290.268 li
76.2528 290.189 li
76.5556 290.112 li
76.8584 290.037 li
77.1612 289.964 li
77.4639 289.894 li
77.7668 289.826 li
78.0695 289.759 li
78.3723 289.695 li
78.6751 289.633 li
78.9779 289.572 li
79.2807 289.513 li
79.5835 289.456 li
79.8863 289.401 li
80.1891 289.347 li
80.4919 289.295 li
80.7947 289.245 li
81.0975 289.195 li
81.4003 289.148 li
81.7031 289.102 li
82.0059 289.057 li
82.3086 289.013 li
82.6115 288.971 li
82.9142 288.93 li
83.217 288.89 li
83.5198 288.851 li
83.8226 288.814 li
84.1254 288.778 li
84.4282 288.742 li
84.731 288.708 li
85.0338 288.675 li
85.3366 288.643 li
85.6394 288.611 li
85.9421 288.581 li
86.2449 288.551 li
86.5478 288.523 li
86.8506 288.495 li
87.1533 288.468 li
87.4561 288.442 li
87.7589 288.417 li
88.0617 288.392 li
88.3645 288.368 li
88.6673 288.345 li
88.9701 288.322 li
89.2729 288.3 li
89.5757 288.279 li
89.8784 288.259 li
90.1813 288.239 li
90.4841 288.219 li
90.7868 288.201 li
91.0896 288.182 li
91.3924 288.165 li
91.6952 288.147 li
91.998 288.131 li
92.3008 288.115 li
92.6036 288.099 li
92.9064 288.084 li
93.2092 288.069 li
93.512 288.054 li
93.8148 288.041 li
94.1176 288.027 li
94.4203 288.014 li
94.7231 288.001 li
95.0259 287.989 li
95.3287 287.977 li
95.6315 287.965 li
95.9343 287.954 li
96.2371 287.943 li
96.5399 287.932 li
96.8427 287.922 li
97.1455 287.912 li
97.4483 287.902 li
97.7511 287.893 li
98.0539 287.884 li
98.3567 287.875 li
98.6595 287.866 li
98.9622 287.858 li
99.265 287.85 li
99.5678 287.842 li
99.8706 287.834 li
100.173 287.827 li
100.476 287.82 li
100.779 287.813 li
101.082 287.806 li
101.385 287.799 li
101.687 287.793 li
101.99 287.787 li
102.293 287.781 li
102.596 287.775 li
102.899 287.769 li
103.201 287.764 li
103.504 287.758 li
103.807 287.753 li
104.11 287.748 li
104.413 287.743 li
104.715 287.739 li
105.018 287.734 li
105.321 287.729 li
105.624 287.725 li
105.926 287.721 li
106.229 287.717 li
106.532 287.713 li
106.835 287.709 li
107.138 287.705 li
107.44 287.702 li
107.743 287.698 li
108.046 287.695 li
108.349 287.692 li
108.652 287.688 li
108.954 287.685 li
109.257 287.682 li
109.56 287.679 li
109.863 287.677 li
110.166 287.674 li
110.468 287.671 li
110.771 287.668 li
111.074 287.666 li
111.377 287.664 li
111.68 287.661 li
111.982 287.659 li
112.285 287.657 li
112.588 287.654 li
112.891 287.652 li
113.194 287.65 li
113.496 287.648 li
113.799 287.646 li
114.102 287.645 li
114.405 287.643 li
114.707 287.641 li
115.01 287.639 li
115.313 287.638 li
115.616 287.636 li
115.919 287.634 li
116.221 287.633 li
116.524 287.631 li
116.827 287.63 li
117.13 287.629 li
117.433 287.627 li
117.735 287.626 li
118.038 287.625 li
118.341 287.624 li
118.644 287.622 li
118.947 287.621 li
119.249 287.62 li
119.552 287.619 li
119.855 287.618 li
120.158 287.617 li
120.461 287.616 li
120.763 287.615 li
121.066 287.614 li
121.369 287.613 li
121.672 287.612 li
121.975 287.611 li
122.277 287.611 li
122.58 287.61 li
122.883 287.609 li
123.186 287.608 li
123.488 287.607 li
123.791 287.607 li
124.094 287.606 li
124.397 287.605 li
124.7 287.605 li
125.002 287.604 li
125.305 287.603 li
125.608 287.603 li
125.911 287.602 li
126.214 287.602 li
126.516 287.601 li
126.819 287.601 li
127.122 287.6 li
127.425 287.6 li
127.728 287.599 li
128.03 287.599 li
128.333 287.598 li
128.636 287.598 li
128.939 287.597 li
129.242 287.597 li
129.544 287.597 li
129.847 287.596 li
130.15 287.596 li
130.453 287.595 li
130.755 287.595 li
131.058 287.595 li
131.361 287.594 li
131.664 287.594 li
131.967 287.594 li
132.269 287.593 li
132.572 287.593 li
132.875 287.593 li
133.178 287.592 li
133.481 287.592 li
133.783 287.592 li
134.086 287.592 li
134.389 287.591 li
134.692 287.591 li
134.995 287.591 li
135.297 287.591 li
135.6 287.591 li
135.903 287.59 li
136.206 287.59 li
136.509 287.59 li
136.811 287.59 li
137.114 287.59 li
137.417 287.589 li
137.72 287.589 li
138.022 287.589 li
138.325 287.589 li
138.628 287.589 li
138.931 287.589 li
139.234 287.588 li
139.536 287.588 li
139.839 287.588 li
140.142 287.588 li
140.445 287.588 li
140.748 287.588 li
141.05 287.587 li
141.353 287.587 li
141.656 287.587 li
141.959 287.587 li
142.262 287.587 li
142.564 287.587 li
142.867 287.587 li
143.17 287.587 li
143.473 287.587 li
143.776 287.586 li
144.078 287.586 li
144.381 287.586 li
144.684 287.586 li
144.987 287.586 li
145.29 287.586 li
145.592 287.586 li
145.895 287.586 li
146.198 287.586 li
146.501 287.586 li
146.803 287.586 li
147.106 287.586 li
147.409 287.586 li
147.712 287.585 li
148.015 287.585 li
148.317 287.585 li
148.62 287.585 li
148.923 287.585 li
149.226 287.585 li
149.529 287.585 li
149.831 287.585 li
150.134 287.585 li
150.437 287.585 li
150.74 287.585 li
151.043 287.585 li
151.345 287.585 li
151.648 287.585 li
151.951 287.585 li
152.254 287.585 li
152.557 287.585 li
152.859 287.585 li
153.162 287.585 li
153.465 287.585 li
153.768 287.584 li
154.071 287.584 li
154.373 287.584 li
154.676 287.584 li
154.979 287.584 li
155.282 287.584 li
155.585 287.584 li
155.887 287.584 li
156.19 287.584 li
156.493 287.584 li
156.796 287.584 li
157.098 287.584 li
157.401 287.584 li
157.704 287.584 li
158.007 287.584 li
158.31 287.584 li
158.612 287.584 li
158.915 287.584 li
159.218 287.584 li
159.521 287.584 li
159.824 287.584 li
160.126 287.584 li
160.429 287.584 li
160.732 287.584 li
161.035 287.584 li
161.338 287.584 li
161.64 287.584 li
161.943 287.584 li
162.246 287.584 li
162.549 287.584 li
162.852 287.584 li
163.154 287.584 li
163.457 287.584 li
163.76 287.584 li
164.063 287.584 li
164.366 287.584 li
164.668 287.584 li
164.971 287.584 li
165.274 287.584 li
165.577 287.584 li
165.879 287.584 li
166.182 287.584 li
166.485 287.584 li
166.788 287.584 li
167.091 287.584 li
167.393 287.584 li
167.696 287.584 li
167.999 287.584 li
168.302 287.584 li
168.605 287.584 li
168.907 287.584 li
169.21 287.584 li
169.513 287.583 li
169.816 287.583 li
170.118 287.583 li
170.421 287.583 li
170.724 287.583 li
171.027 287.583 li
171.33 287.583 li
171.633 287.583 li
171.935 287.583 li
172.238 287.583 li
172.541 287.583 li
172.844 287.583 li
173.146 287.583 li
173.449 287.583 li
173.752 287.583 li
174.055 287.583 li
174.358 287.583 li
174.66 287.583 li
174.963 287.583 li
175.266 287.583 li
175.569 287.583 li
175.872 287.583 li
176.174 287.583 li
176.477 287.583 li
176.78 287.583 li
177.083 287.583 li
177.386 287.583 li
177.688 287.583 li
177.991 287.583 li
178.294 287.583 li
178.597 287.583 li
178.9 287.583 li
179.202 287.583 li
179.505 287.583 li
179.808 287.583 li
180.111 287.583 li
180.413 287.583 li
180.716 287.583 li
181.019 287.583 li
181.322 287.583 li
181.625 287.583 li
181.927 287.583 li
182.23 287.583 li
182.533 287.583 li
182.836 287.583 li
183.139 287.583 li
183.441 287.583 li
183.744 287.583 li
184.047 287.583 li
184.35 287.583 li
184.653 287.583 li
184.955 287.583 li
185.258 287.583 li
185.561 287.583 li
185.864 287.583 li
186.167 287.583 li
186.469 287.583 li
186.772 287.583 li
187.075 287.583 li
187.378 287.583 li
187.681 287.583 li
187.983 287.583 li
188.286 287.583 li
188.589 287.583 li
188.892 287.583 li
189.194 287.583 li
189.497 287.583 li
189.8 287.583 li
190.103 287.583 li
190.406 287.583 li
190.708 287.583 li
191.011 287.583 li
191.314 287.583 li
191.617 287.583 li
191.92 287.583 li
192.222 287.583 li
192.525 287.583 li
192.828 287.583 li
193.131 287.583 li
193.434 287.583 li
193.736 287.583 li
194.039 287.583 li
194.342 287.583 li
194.645 287.583 li
194.948 287.583 li
195.25 287.583 li
195.553 287.583 li
195.856 287.583 li
196.159 287.583 li
196.462 287.583 li
196.764 287.583 li
197.067 287.583 li
197.37 287.583 li
197.673 287.583 li
197.975 287.583 li
198.278 287.583 li
198.581 287.583 li
198.884 287.583 li
199.187 287.583 li
199.489 287.583 li
199.792 287.583 li
200.095 287.583 li
200.398 287.583 li
200.701 287.583 li
201.003 287.583 li
201.306 287.583 li
201.609 287.583 li
201.912 287.583 li
202.215 287.583 li
202.517 287.583 li
202.82 287.583 li
203.123 287.583 li
203.426 287.583 li
203.729 287.583 li
204.031 287.583 li
204.334 287.583 li
204.637 287.583 li
204.94 287.583 li
205.243 287.583 li
205.545 287.583 li
205.848 287.583 li
206.151 287.583 li
206.454 287.583 li
206.756 287.583 li
207.059 287.583 li
207.362 287.583 li
207.665 287.583 li
207.968 287.583 li
208.27 287.583 li
208.573 287.583 li
208.876 287.583 li
209.179 287.583 li
209.482 287.583 li
209.784 287.583 li
210.087 287.583 li
210.39 287.583 li
210.693 287.583 li
210.996 287.583 li
211.298 287.583 li
211.601 287.583 li
211.904 287.583 li
212.207 287.583 li
212.51 287.583 li
212.812 287.583 li
213.115 287.583 li
213.418 287.583 li
213.721 287.583 li
214.023 287.583 li
214.326 287.583 li
214.629 287.583 li
214.932 287.583 li
215.235 287.583 li
215.537 287.583 li
215.84 287.583 li
216.143 287.583 li
216.446 287.583 li
216.749 287.583 li
217.051 287.583 li
217.354 287.583 li
217.657 287.583 li
217.96 287.583 li
218.263 287.583 li
218.565 287.583 li
218.868 287.583 li
219.171 287.583 li
219.474 287.583 li
219.777 287.583 li
220.079 287.583 li
220.382 287.583 li
220.685 287.583 li
220.988 287.583 li
221.29 287.583 li
221.593 287.583 li
221.896 287.583 li
222.199 287.583 li
222.502 287.583 li
222.804 287.583 li
223.107 287.583 li
223.41 287.583 li
223.713 287.583 li
224.016 287.583 li
224.318 287.583 li
224.621 287.583 li
224.924 287.583 li
225.227 287.583 li
225.53 287.583 li
225.832 287.583 li
226.135 287.583 li
226.438 287.583 li
226.741 287.583 li
227.044 287.583 li
227.346 287.583 li
227.649 287.583 li
227.952 287.583 li
228.255 287.583 li
228.558 287.583 li
228.86 287.583 li
229.163 287.583 li
229.466 287.583 li
229.769 287.583 li
230.072 287.583 li
230.374 287.583 li
230.677 287.583 li
230.98 287.583 li
231.283 287.583 li
231.585 287.583 li
231.888 287.583 li
232.191 287.583 li
232.494 287.583 li
232.797 287.583 li
233.099 287.583 li
233.402 287.583 li
233.705 287.583 li
234.008 287.583 li
234.311 287.583 li
234.613 287.583 li
234.916 287.583 li
235.219 287.583 li
235.522 287.583 li
235.825 287.583 li
236.127 287.583 li
236.43 287.583 li
236.733 287.583 li
237.036 287.583 li
237.339 287.583 li
237.641 287.583 li
237.944 287.583 li
238.247 287.583 li
238.55 287.583 li
238.852 287.583 li
239.155 287.583 li
239.458 287.583 li
239.761 287.583 li
240.064 287.583 li
240.366 287.583 li
240.669 287.583 li
240.972 287.583 li
241.275 287.583 li
241.578 287.583 li
241.88 287.583 li
242.183 287.583 li
242.486 287.583 li
242.789 287.583 li
243.092 287.583 li
243.394 287.583 li
243.697 287.583 li
244 287.583 li
244.303 287.583 li
244.606 287.583 li
244.908 287.583 li
245.211 287.583 li
245.514 287.583 li
245.817 287.583 li
246.119 287.583 li
246.422 287.583 li
246.725 287.583 li
247.028 287.583 li
247.331 287.583 li
247.633 287.583 li
247.936 287.583 li
248.239 287.583 li
248.542 287.583 li
248.845 287.583 li
249.147 287.583 li
249.45 287.583 li
249.753 287.583 li
250.056 287.583 li
250.359 287.583 li
250.661 287.583 li
250.964 287.583 li
251.267 287.583 li
251.57 287.583 li
251.873 287.583 li
252.175 287.583 li
252.478 287.583 li
252.781 287.583 li
253.084 287.583 li
253.387 287.583 li
253.689 287.583 li
253.992 287.583 li
254.295 287.583 li
254.598 287.583 li
254.9 287.583 li
255.203 287.583 li
255.506 287.583 li
255.809 287.583 li
256.112 287.583 li
256.415 287.583 li
256.717 287.583 li
257.02 287.583 li
257.323 287.583 li
257.626 287.583 li
257.928 287.583 li
258.231 287.583 li
258.534 287.583 li
258.837 287.583 li
259.14 287.583 li
259.442 287.583 li
259.745 287.583 li
260.048 287.583 li
260.351 287.583 li
260.654 287.583 li
260.956 287.583 li
261.259 287.583 li
261.562 287.583 li
261.865 287.583 li
262.168 287.583 li
262.47 287.583 li
262.773 287.583 li
263.076 287.583 li
263.379 287.583 li
263.681 287.583 li
263.984 287.583 li
264.287 287.583 li
264.59 287.583 li
264.893 287.583 li
265.195 287.583 li
265.498 287.583 li
265.801 287.583 li
266.104 287.583 li
266.407 287.583 li
266.709 287.583 li
267.012 287.583 li
267.315 287.583 li
267.618 287.583 li
267.921 287.583 li
268.223 287.583 li
268.526 287.583 li
268.829 287.583 li
269.132 287.583 li
269.435 287.583 li
269.737 287.583 li
270.04 287.583 li
270.343 287.583 li
270.646 287.583 li
270.949 287.583 li
271.251 287.583 li
271.554 287.583 li
271.857 287.583 li
272.16 287.583 li
272.462 287.583 li
272.765 287.583 li
273.068 287.583 li
273.371 287.583 li
273.674 287.583 li
273.976 287.583 li
274.279 287.583 li
274.582 287.583 li
274.885 287.583 li
275.188 287.583 li
275.49 287.583 li
275.793 287.583 li
276.096 287.583 li
276.399 287.583 li
276.702 287.583 li
277.004 287.583 li
277.307 287.583 li
277.61 287.583 li
277.913 287.583 li
278.216 287.583 li
278.518 287.583 li
278.821 287.583 li
279.124 287.583 li
279.427 287.583 li
279.73 287.583 li
280.032 287.583 li
280.335 287.583 li
280.638 287.583 li
280.941 287.583 li
281.243 287.583 li
281.546 287.583 li
281.849 287.583 li
282.152 287.583 li
282.455 287.583 li
282.757 287.583 li
283.06 287.583 li
283.363 287.583 li
283.666 287.583 li
283.969 287.583 li
284.271 287.583 li
284.574 287.583 li
284.877 287.583 li
285.18 287.583 li
285.483 287.583 li
285.785 287.583 li
286.088 287.583 li
286.391 287.583 li
286.694 287.583 li
286.996 287.583 li
287.299 287.583 li
287.602 287.583 li
287.905 287.583 li
288.208 287.583 li
288.51 287.583 li
288.813 287.583 li
289.116 287.583 li
289.419 287.583 li
289.722 287.583 li
290.024 287.583 li
290.327 287.583 li
290.63 287.583 li
290.933 287.583 li
291.236 287.583 li
291.538 287.583 li
291.841 287.583 li
292.144 287.583 li
292.447 287.583 li
292.75 287.583 li
293.052 287.583 li
293.355 287.583 li
293.658 287.583 li
293.961 287.583 li
294.264 287.583 li
294.566 287.583 li
294.869 287.583 li
295.172 287.583 li
295.475 287.583 li
295.778 287.583 li
296.08 287.583 li
296.383 287.583 li
296.686 287.583 li
296.989 287.583 li
297.292 287.583 li
297.594 287.583 li
297.897 287.583 li
298.2 287.583 li
298.503 287.583 li
298.805 287.583 li
299.108 287.583 li
299.411 287.583 li
299.714 287.583 li
300.017 287.583 li
300.319 287.583 li
300.622 287.583 li
300.925 287.583 li
301.228 287.583 li
301.531 287.583 li
301.833 287.583 li
302.136 287.583 li
302.439 287.583 li
302.742 287.583 li
303.045 287.583 li
303.347 287.583 li
303.65 287.583 li
303.953 287.583 li
304.256 287.583 li
304.559 287.583 li
304.861 287.583 li
305.164 287.583 li
305.467 287.583 li
305.77 287.583 li
306.072 287.583 li
306.375 287.583 li
306.678 287.583 li
306.981 287.583 li
307.284 287.583 li
307.586 287.583 li
307.889 287.583 li
308.192 287.583 li
308.495 287.583 li
308.798 287.583 li
309.1 287.583 li
309.403 287.583 li
309.706 287.583 li
310.009 287.583 li
310.312 287.583 li
310.614 287.583 li
310.917 287.583 li
311.22 287.583 li
311.523 287.583 li
311.826 287.583 li
312.128 287.583 li
312.431 287.583 li
312.734 287.583 li
313.037 287.583 li
313.34 287.583 li
313.642 287.583 li
313.945 287.583 li
314.248 287.583 li
314.551 287.583 li
314.853 287.583 li
315.156 287.583 li
315.459 287.583 li
315.762 287.583 li
316.065 287.583 li
316.367 287.583 li
316.67 287.583 li
316.973 287.583 li
317.276 287.583 li
317.579 287.583 li
317.881 287.583 li
318.184 287.583 li
318.487 287.583 li
318.79 287.583 li
319.093 287.583 li
319.395 287.583 li
319.698 287.583 li
320.001 287.583 li
320.304 287.583 li
320.606 287.583 li
320.909 287.583 li
321.212 287.583 li
321.515 287.583 li
321.818 287.583 li
322.12 287.583 li
322.423 287.583 li
322.726 287.583 li
323.029 287.583 li
323.332 287.583 li
323.634 287.583 li
323.937 287.583 li
324.24 287.583 li
324.543 287.583 li
324.846 287.583 li
325.148 287.583 li
325.451 287.583 li
325.754 287.583 li
326.057 287.583 li
326.36 287.583 li
326.662 287.583 li
326.965 287.583 li
327.268 287.583 li
327.571 287.583 li
327.874 287.583 li
328.176 287.583 li
328.479 287.583 li
328.782 287.583 li
329.085 287.583 li
329.387 287.583 li
329.69 287.583 li
329.993 287.583 li
330.296 287.583 li
330.599 287.583 li
330.902 287.583 li
331.204 287.583 li
331.507 287.583 li
331.81 287.583 li
332.113 287.583 li
332.415 287.583 li
332.718 287.583 li
333.021 287.583 li
333.324 287.583 li
333.627 287.583 li
333.929 287.583 li
334.232 287.583 li
334.535 287.583 li
334.838 287.583 li
335.141 287.583 li
335.443 287.583 li
335.746 287.583 li
336.049 287.583 li
336.352 287.583 li
336.655 287.583 li
336.957 287.583 li
337.26 287.583 li
337.563 287.583 li
337.866 287.583 li
338.168 287.583 li
338.471 287.583 li
338.774 287.583 li
339.077 287.583 li
339.38 287.583 li
339.683 287.583 li
339.985 287.583 li
340.288 287.583 li
340.591 287.583 li
340.894 287.583 li
341.197 287.583 li
341.499 287.583 li
341.802 287.583 li
342.105 287.583 li
342.408 287.583 li
342.71 287.583 li
343.013 287.583 li
343.316 287.583 li
343.619 287.583 li
343.922 287.583 li
344.224 287.583 li
344.527 287.583 li
344.83 287.583 li
345.133 287.583 li
345.436 287.583 li
345.738 287.583 li
346.041 287.583 li
346.344 287.583 li
346.647 287.583 li
346.949 287.583 li
347.252 287.583 li
347.555 287.583 li
347.858 287.583 li
348.161 287.583 li
348.463 287.583 li
348.766 287.583 li
349.069 287.583 li
349.372 287.583 li
349.675 287.583 li
349.977 287.583 li
350.28 287.583 li
350.583 287.583 li
350.886 287.583 li
351.189 287.583 li
351.491 287.583 li
351.794 287.583 li
352.097 287.583 li
352.4 287.583 li
352.703 287.583 li
353.005 287.583 li
353.308 287.583 li
353.611 287.583 li
353.914 287.583 li
354.217 287.583 li
354.519 287.583 li
354.822 287.583 li
355.125 287.583 li
355.428 287.583 li
355.73 287.583 li
356.033 287.583 li
356.336 287.583 li
356.639 287.583 li
356.942 287.583 li
357.244 287.583 li
357.547 287.583 li
357.85 287.583 li
358.153 287.583 li
358.456 287.583 li
358.758 287.583 li
359.061 287.583 li
359.364 287.583 li
359.667 287.583 li
359.97 287.583 li
360.272 287.583 li
360.575 287.583 li
360.878 287.583 li
361.181 287.583 li
361.484 287.583 li
361.786 287.583 li
362.089 287.583 li
362.392 287.583 li
362.695 287.583 li
362.998 287.583 li
363.3 287.583 li
363.603 287.583 li
363.906 287.583 li
364.209 287.583 li
364.511 287.583 li
364.814 287.583 li
365.117 287.583 li
365.42 287.583 li
365.723 287.583 li
366.025 287.583 li
366.328 287.583 li
366.631 287.583 li
366.934 287.583 li
367.237 287.583 li
367.539 287.583 li
367.842 287.583 li
368.145 287.583 li
368.448 287.583 li
368.751 287.583 li
369.053 287.583 li
369.356 287.583 li
369.659 287.583 li
369.962 287.583 li
370.265 287.583 li
370.567 287.583 li
370.87 287.583 li
371.173 287.583 li
371.476 287.583 li
371.778 287.583 li
372.081 287.583 li
372.384 287.583 li
372.687 287.583 li
372.99 287.583 li
373.292 287.583 li
373.595 287.583 li
373.898 287.583 li
374.201 287.583 li
374.504 287.583 li
374.806 287.583 li
375.109 287.583 li
375.412 287.583 li
375.715 287.583 li
376.018 287.583 li
376.32 287.583 li
376.623 287.583 li
376.926 287.583 li
377.229 287.583 li
377.532 287.583 li
377.834 287.583 li
378.137 287.583 li
378.44 287.583 li
378.743 287.583 li
379.046 287.583 li
379.348 287.583 li
379.651 287.583 li
379.954 287.583 li
380.257 287.583 li
380.559 287.583 li
380.862 287.583 li
381.165 287.583 li
381.468 287.583 li
381.771 287.583 li
382.073 287.583 li
382.376 287.583 li
382.679 287.583 li
382.982 287.583 li
383.285 287.583 li
383.587 287.583 li
383.89 287.583 li
384.193 287.583 li
384.496 287.583 li
384.799 287.583 li
385.101 287.583 li
385.404 287.583 li
385.707 287.583 li
386.01 287.583 li
386.313 287.583 li
386.615 287.583 li
386.918 287.583 li
387.221 287.583 li
387.524 287.583 li
387.827 287.583 li
388.129 287.583 li
388.432 287.583 li
388.735 287.583 li
389.038 287.583 li
389.34 287.583 li
389.643 287.583 li
389.946 287.583 li
390.249 287.583 li
390.552 287.583 li
390.854 287.583 li
391.157 287.583 li
391.46 287.583 li
391.763 287.583 li
392.066 287.583 li
392.368 287.583 li
392.671 287.583 li
392.974 287.583 li
393.277 287.583 li
393.58 287.583 li
393.882 287.583 li
394.185 287.583 li
394.488 287.583 li
394.791 287.583 li
395.094 287.583 li
395.396 287.583 li
395.699 287.583 li
396.002 287.583 li
396.305 287.583 li
396.608 287.583 li
396.91 287.583 li
397.213 287.583 li
397.516 287.583 li
397.819 287.583 li
398.121 287.583 li
398.424 287.583 li
398.727 287.583 li
399.03 287.583 li
399.333 287.583 li
399.635 287.583 li
399.938 287.583 li
400.241 287.583 li
400.544 287.583 li
400.847 287.583 li
401.149 287.583 li
401.452 287.583 li
401.755 287.583 li
402.058 287.583 li
402.361 287.583 li
402.663 287.583 li
402.966 287.583 li
403.269 287.583 li
403.572 287.583 li
403.875 287.583 li
404.177 287.583 li
404.48 287.583 li
404.783 287.583 li
405.086 287.583 li
405.389 287.583 li
405.691 287.583 li
405.994 287.583 li
406.297 287.583 li
406.6 287.583 li
406.902 287.583 li
407.205 287.583 li
407.508 287.583 li
407.811 287.583 li
408.114 287.583 li
408.416 287.583 li
408.719 287.583 li
409.022 287.583 li
409.325 287.583 li
409.628 287.583 li
409.93 287.583 li
410.233 287.583 li
410.536 287.583 li
410.839 287.583 li
411.142 287.583 li
411.444 287.583 li
411.747 287.583 li
412.05 287.583 li
412.353 287.583 li
412.656 287.583 li
412.958 287.583 li
413.261 287.583 li
413.564 287.583 li
413.867 287.583 li
414.17 287.583 li
414.472 287.583 li
414.775 287.583 li
415.078 287.583 li
415.381 287.583 li
415.683 287.583 li
415.986 287.583 li
416.289 287.583 li
416.592 287.583 li
416.895 287.583 li
417.197 287.583 li
417.5 287.583 li
417.803 287.583 li
418.106 287.583 li
418.409 287.583 li
418.711 287.583 li
419.014 287.583 li
419.317 287.583 li
419.62 287.583 li
419.923 287.583 li
420.225 287.583 li
420.528 287.583 li
420.831 287.583 li
421.134 287.583 li
421.437 287.583 li
421.739 287.583 li
422.042 287.583 li
422.345 287.583 li
422.648 287.583 li
422.95 287.583 li
423.253 287.583 li
423.556 287.583 li
423.859 287.583 li
424.162 287.583 li
424.464 287.583 li
424.767 287.583 li
425.07 287.583 li
425.373 287.583 li
425.676 287.583 li
425.978 287.583 li
426.281 287.583 li
426.584 287.583 li
426.887 287.583 li
427.19 287.583 li
427.492 287.583 li
427.795 287.583 li
428.098 287.583 li
428.401 287.583 li
428.704 287.583 li
429.006 287.583 li
429.309 287.583 li
429.612 287.583 li
429.915 287.583 li
430.217 287.583 li
430.52 287.583 li
430.823 287.583 li
431.126 287.583 li
431.429 287.583 li
431.731 287.583 li
432.034 287.583 li
432.337 287.583 li
432.64 287.583 li
432.943 287.583 li
433.245 287.583 li
433.548 287.583 li
433.851 287.583 li
434.154 287.583 li
434.457 287.583 li
434.759 287.583 li
435.062 287.583 li
435.365 287.583 li
435.668 287.583 li
435.971 287.583 li
436.273 287.583 li
436.576 287.583 li
436.879 287.583 li
437.182 287.583 li
437.484 287.583 li
437.787 287.583 li
438.09 287.583 li
438.393 287.583 li
438.696 287.583 li
438.999 287.583 li
439.301 287.583 li
439.604 287.583 li
439.907 287.583 li
440.21 287.583 li
440.512 287.583 li
440.815 287.583 li
441.118 287.583 li
441.421 287.583 li
441.724 287.583 li
442.026 287.583 li
442.329 287.583 li
442.632 287.583 li
442.935 287.583 li
443.238 287.583 li
443.54 287.583 li
443.843 287.583 li
444.146 287.583 li
444.449 287.583 li
444.752 287.583 li
445.054 287.583 li
445.357 287.583 li
445.66 287.583 li
445.963 287.583 li
446.265 287.583 li
446.568 287.583 li
446.871 287.583 li
447.174 287.583 li
447.477 287.583 li
447.78 287.583 li
448.082 287.583 li
448.385 287.583 li
448.688 287.583 li
448.991 287.583 li
449.293 287.583 li
449.596 287.583 li
449.899 287.583 li
450.202 287.583 li
450.505 287.583 li
450.807 287.583 li
451.11 287.583 li
451.413 287.583 li
451.716 287.583 li
452.019 287.583 li
452.321 287.583 li
452.624 287.583 li
452.927 287.583 li
453.23 287.583 li
453.533 287.583 li
453.835 287.583 li
454.138 287.583 li
454.441 287.583 li
454.744 287.583 li
455.047 287.583 li
455.349 287.583 li
455.652 287.583 li
455.955 287.583 li
456.258 287.583 li
456.56 287.583 li
456.863 287.583 li
457.166 287.583 li
457.469 287.583 li
457.772 287.583 li
458.074 287.583 li
458.377 287.583 li
458.68 287.583 li
458.983 287.583 li
459.286 287.583 li
459.588 287.583 li
459.891 287.583 li
460.194 287.583 li
460.497 287.583 li
460.8 287.583 li
461.102 287.583 li
461.405 287.583 li
461.708 287.583 li
462.011 287.583 li
462.314 287.583 li
462.616 287.583 li
462.919 287.583 li
463.222 287.583 li
463.525 287.583 li
463.827 287.583 li
464.13 287.583 li
464.433 287.583 li
464.736 287.583 li
465.039 287.583 li
465.342 287.583 li
465.644 287.583 li
465.947 287.583 li
466.25 287.583 li
466.553 287.583 li
466.855 287.583 li
467.158 287.583 li
467.461 287.583 li
467.764 287.583 li
468.067 287.583 li
468.369 287.583 li
468.672 287.583 li
468.975 287.583 li
469.278 287.583 li
469.581 287.583 li
469.883 287.583 li
470.186 287.583 li
470.489 287.583 li
470.792 287.583 li
471.094 287.583 li
471.397 287.583 li
471.7 287.583 li
472.003 287.583 li
472.306 287.583 li
472.609 287.583 li
472.911 287.583 li
473.214 287.583 li
473.517 287.583 li
473.82 287.583 li
474.122 287.583 li
474.425 287.583 li
474.728 287.583 li
475.031 287.583 li
475.334 287.583 li
475.636 287.583 li
475.939 287.583 li
476.242 287.583 li
476.545 287.583 li
476.848 287.583 li
477.15 287.583 li
477.453 287.583 li
477.756 287.583 li
478.059 287.583 li
478.362 287.583 li
478.664 287.583 li
478.967 287.583 li
479.27 287.583 li
479.573 287.583 li
479.875 287.583 li
480.178 287.583 li
480.481 287.583 li
480.784 287.583 li
481.087 287.583 li
481.389 287.583 li
481.692 287.583 li
481.995 287.583 li
482.298 287.583 li
482.601 287.583 li
482.903 287.583 li
483.206 287.583 li
483.509 287.583 li
483.812 287.583 li
484.115 287.583 li
484.417 287.583 li
484.72 287.583 li
485.023 287.583 li
485.326 287.583 li
485.629 287.583 li
485.931 287.583 li
486.234 287.583 li
486.537 287.583 li
486.84 287.583 li
487.143 287.583 li
487.445 287.583 li
487.748 287.583 li
488.051 287.583 li
488.354 287.583 li
488.656 287.583 li
488.959 287.583 li
489.262 287.583 li
489.565 287.583 li
489.868 287.583 li
490.17 287.583 li
490.473 287.583 li
490.776 287.583 li
491.079 287.583 li
491.382 287.583 li
491.684 287.583 li
491.987 287.583 li
492.29 287.583 li
492.593 287.583 li
492.896 287.583 li
493.198 287.583 li
493.501 287.583 li
493.804 287.583 li
494.107 287.583 li
494.41 287.583 li
494.712 287.583 li
495.015 287.583 li
495.318 287.583 li
495.621 287.583 li
495.924 287.583 li
496.226 287.583 li
496.529 287.583 li
496.832 287.583 li
497.135 287.583 li
497.438 287.583 li
497.74 287.583 li
498.043 287.583 li
498.346 287.583 li
498.649 287.583 li
498.951 287.583 li
499.254 287.583 li
499.557 287.583 li
499.86 287.583 li
500.163 287.583 li
500.465 287.583 li
500.768 287.583 li
501.071 287.583 li
501.374 287.583 li
501.677 287.583 li
501.979 287.583 li
502.282 287.583 li
502.585 287.583 li
502.888 287.583 li
503.191 287.583 li
503.493 287.583 li
503.796 287.583 li
504.099 287.583 li
504.402 287.583 li
504.704 287.583 li
505.007 287.583 li
505.31 287.583 li
505.613 287.583 li
505.916 287.583 li
506.219 287.583 li
506.521 287.583 li
506.824 287.583 li
507.127 287.583 li
507.43 287.583 li
507.732 287.583 li
508.035 287.583 li
508.338 287.583 li
508.641 287.583 li
508.944 287.583 li
509.246 287.583 li
509.549 287.583 li
509.852 287.583 li
510.155 287.583 li
510.458 287.583 li
510.76 287.583 li
511.063 287.583 li
511.366 287.583 li
511.669 287.583 li
511.972 287.583 li
512.274 287.583 li
512.577 287.583 li
512.88 287.583 li
513.183 287.583 li
513.485 287.583 li
513.788 287.583 li
514.091 287.583 li
514.394 287.583 li
514.697 287.583 li
515 287.583 li
515.302 287.583 li
515.605 287.583 li
515.908 287.583 li
516.211 287.583 li
516.513 287.583 li
516.816 287.583 li
517.119 287.583 li
517.422 287.583 li
517.725 287.583 li
518.027 287.583 li
518.33 287.583 li
518.633 287.583 li
518.936 287.583 li
519.239 287.583 li
519.541 287.583 li
519.844 287.583 li
520.147 287.583 li
520.45 287.583 li
520.753 287.583 li
521.055 287.583 li
521.358 287.583 li
521.661 287.583 li
521.964 287.583 li
522.266 287.583 li
522.569 287.583 li
522.872 287.583 li
523.175 287.583 li
523.478 287.583 li
523.781 287.583 li
524.083 287.583 li
524.386 287.583 li
524.689 287.583 li
524.992 287.583 li
525.294 287.583 li
525.597 287.583 li
525.9 287.583 li
526.203 287.583 li
526.506 287.583 li
526.808 287.583 li
527.111 287.583 li
527.414 287.583 li
527.717 287.583 li
528.02 287.583 li
528.322 287.583 li
528.625 287.583 li
528.928 287.583 li
529.231 287.583 li
529.534 287.583 li
529.836 287.583 li
530.139 287.583 li
530.442 287.583 li
530.745 287.583 li
531.047 287.583 li
531.35 287.583 li
531.653 287.583 li
531.956 287.583 li
532.259 287.583 li
532.561 287.583 li
532.864 287.583 li
533.167 287.583 li
533.47 287.583 li
533.773 287.583 li
534.075 287.583 li
534.378 287.583 li
534.681 287.583 li
534.984 287.583 li
535.287 287.583 li
535.589 287.583 li
535.892 287.583 li
536.195 287.583 li
536.498 287.583 li
536.801 287.583 li
537.063 287.583 li
.883665 .769162 0 0 cmyk
@
2 lj
1 ml
[1.96364 1.96364 ] 0 dsh
32.3478 489.445 mo
52.5341 85.7214 li
72.7202 489.445 li
92.9064 85.7214 li
113.093 489.445 li
133.279 85.7214 li
153.465 489.445 li
173.651 85.7214 li
193.837 489.445 li
214.023 85.7214 li
234.21 489.445 li
254.396 85.7214 li
274.582 489.445 li
294.768 85.7214 li
314.954 489.445 li
335.141 85.7214 li
355.327 489.445 li
375.513 85.7214 li
395.699 489.445 li
415.885 85.7214 li
436.072 489.445 li
456.258 85.7214 li
476.444 489.445 li
496.63 85.7214 li
516.816 489.445 li
537.002 85.7214 li
537.063 86.9246 li
0 .993988 1 0 cmyk
@
528.821 46.2131 mo
528.821 12.8312 li
422.784 12.8312 li
422.784 46.2131 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: Helvetica-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal OZXKHQ+Helvetica-Bold gcheck setglobal} if
1 8160 44 <00020084000001b605df00030004003040110402020108040617171a0400
2501190506ba014b00210135b179182b2b4ef44dfd394e456544e62f003f
3f3c3130290111212701b6fece01329905c21d00>OZXKHQ+Helvetica-Bold AddT42Char 
1 12460 68 <0003003bffde0438045f000e0039003a008f404f3b0235367901890104d8
1e0126f3e62ae7230e0d05020005131a2b24232204262e262e2a0d050200
041b0b221b162c3a1f072a0a0b2c320b3a134d004d2e3a352a3e261a3c1a
4d1b2d084d35193b3cbc01190021004801ae00182b2b4ef44dedf4ed4e10
f64de41139cde5e52f003fed3f3f3cfdcd39111217391239390111121739
111217392b3130015d005d010e010f010607061514163332363727363736
35342623220706072136373621321716151114171e011715212e01270607
0623222635343736371302de1b3730405a2742513a5c9b03ad4f223d5d5a
652a1e0afeed0947710113b38b8b02031c1cfeca0d0a033b4d5c7494c19b
55a57002121115090c1017275249416c8fef0a0f1a37433332253f8f5c90
4747c5fe0c344a38280d2a213a25402d35a99bc95a311501d4000000>OZXKHQ+Helvetica-Bold AddT42Char 
1 13184 71 <0002003fffde046505c00010001d004f402ce80c010706151d0210030017
241007060a1d240a0b15031a131f061f0327041a1f1a360d191e1f982148
45182b2b4ef44ded4e10f64dfdf4e4111239003fed3f3fed3f1139113912
393130005d00161711211121350e01232200351000331236353427262322
0615141633027a9a300121feeb3d9c74bffefb0101d7b77e653e527d7577
79045c574d0208fa409761580135f201170140fc72b48fc85634bd8c97b5
>OZXKHQ+Helvetica-Bold AddT42Char 
1 13364 72 <0003002fffdc043a045f00060021002200ab4049460887149701990a0406
0109050610051a4b05461049208601850f871f0a03160317131613174808
4c164c17491a5c165c175a1adc01db04e91de720f720104a014610880583
100402b8019540334f0e5f0e6f0e030e0e1b062422210717122c1b0b1603
02220336177b221e600c800c020c1a24021f0e951e1923249821484e182b
2b4ef44dfde44e10f65d4d1139e4ed2f111239003fedcd3f3ced12392f5d
fd313000715d01715d000607212e01233616171617160721161716333237
3637210607062322001110003b0101d06d0e01bb077b5b88da4740130b02
fd1606613b5358371e1701230b5a8cfcd0fec2011fe51403747c6a7175eb
666e61804b8da44229321b3061649f010c012e011b012e000000>OZXKHQ+Helvetica-Bold AddT42Char 
1 14796 79 <0001008b000001a805c20003002540130200010a0517171a002701190405
b2215045182b2b4ef44dfd4e456544e6003f3f31302901112101a8fee301
1d05c200>OZXKHQ+Helvetica-Bold AddT42Char 
OZXKHQ+Helvetica-Bold /CharStrings get begin
/I 44 def
/a 68 def
/d 71 def
/e 72 def
/l 79 def
end
OZXKHQ+Helvetica-Bold /Encoding get
dup 73 /I put
dup 97 /a put
dup 100 /d put
dup 101 /e put
dup 108 /l put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/OZXKHQ+Helvetica-Bold*1 
[46{/.notdef}rp /period /.notdef /zero /one /two /three /four 
/five 19{/.notdef}rp /I 23{/.notdef}rp /a 2{/.notdef}rp /d /e 
6{/.notdef}rp /l 147{/.notdef}rp]
OZXKHQ+Helvetica-Bold nf
OZXKHQ+Helvetica-Bold*1 [14.3967 0 0 -14.3967 0 0 ]msf
457.939 25.4309 mo
(Ideal)
[4.00229 8.7963 8.00458 8.00458 0 ]xsh
1 lj
10 ml
[] 0 dsh
425.776 21.8309 mo
455.695 21.8309 li
.883665 .769162 0 0 cmyk
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: Helvetica-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal OZXKHQ+Helvetica-Bold gcheck setglobal} if

1 0 3 <> OZXKHQ+Helvetica-Bold AddT42Char 
1 5760 32 <0002004900b10484038b00030007002c4018032202072206070204900001
001a090219080965216a46182b2b4ee410f65d4d3c103c002ffddefd3130
01112111011121110484fbc5043bfbc5038bfef90107fe2dfef90107>OZXKHQ+Helvetica-Bold AddT42Char 
1 14108 75 <000100870000045e05bd0017003f402505022702580e680e04141712000c
24170710070a0836051a1913102711191819be215045182b2b4ef44dfd3c
4e10f64ded003f3c3fed3f11393130015d0016171e011511211134272623
22061511211121113e01330343a5352d14fedd1e276d7175fee4011c3ea3
5a045e46483d8192fd80029758364c978cfdb205bdfdf75f4b000000>OZXKHQ+Helvetica-Bold AddT42Char 
OZXKHQ+Helvetica-Bold /CharStrings get begin
/space 3 def
/equal 32 def
/h 75 def
end
OZXKHQ+Helvetica-Bold /Encoding get
dup 32 /space put
dup 61 /equal put
dup 104 /h put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/OZXKHQ+Helvetica-Bold*1 
[32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two 
/three /four /five 7{/.notdef}rp /equal 11{/.notdef}rp /I 23{/.notdef}rp 
/a 2{/.notdef}rp /d /e 2{/.notdef}rp /h 3{/.notdef}rp /l 
147{/.notdef}rp]
OZXKHQ+Helvetica-Bold nf
OZXKHQ+Helvetica-Bold*1 [14.3967 0 0 -14.3967 0 0 ]msf
457.939 40.8134 mo
(h = 2.000)
[8.7963 4.00229 8.40768 4.00229 8.00458 4.00229 8.00458 8.00458 0 ]xsh
2 lj
1 ml
[1.96364 1.96364 ] 0 dsh
425.776 37.2134 mo
455.695 37.2134 li
0 .993988 1 0 cmyk
@
0 lj
10 ml
[] 0 dsh
422.784 46.2131 mo
422.784 12.8312 li
528.821 12.8312 li
528.821 46.2131 li
cp
1 /0 /CSD get_res sepcs
.851 sep
@
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 /1 ]]
] del_res
/OZXKHQ+Helvetica-Bold*1 uf
/OZXKHQ+Helvetica-Bold uf
/Helvetica-Bold uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
